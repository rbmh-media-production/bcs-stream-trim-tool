<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ffme.common</name>
    </assembly>
    <members>
        <member name="T:Unosquare.FFME.ClosedCaptions.CCColorType">
            <summary>
            Enumerates the differen Closed-Captioning Colors
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.None">
            <summary>
            No color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.White">
            <summary>
            The white color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.WhiteTransparent">
            <summary>
            The white transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.Green">
            <summary>
            The green color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.GreenTransparent">
            <summary>
            The green transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.Blue">
            <summary>
            The blue color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.BlueTransparent">
            <summary>
            The blue transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.Cyan">
            <summary>
            The cyan color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.CyanTransparent">
            <summary>
            The cyan transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.Red">
            <summary>
            The red color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.RedTransparent">
            <summary>
            The red transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.Yellow">
            <summary>
            The yellow color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.YellowTransparent">
            <summary>
            The yellow transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.Magenta">
            <summary>
            The magenta color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.MagentaTransparent">
            <summary>
            The magenta transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.WhiteItalics">
            <summary>
            The white italics color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.WhiteItalicsTransparent">
            <summary>
            The white italics transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.BackgroundTransparent">
            <summary>
            The background transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.ForegroundBlack">
            <summary>
            The foreground black color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCColorType.ForegroundBlackUnderline">
            <summary>
            The foreground black underline color
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CCMiscCommandType">
            <summary>
            Enumerates the Closed-Captioning misc commands
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.None">
            <summary>
            No command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.Resume">
            <summary>
            The resume command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.Backspace">
            <summary>
            The backspace command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.AlarmOff">
            <summary>
            The alarm off command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.AlarmOn">
            <summary>
            The alarm on command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.ClearLine">
            <summary>
            The clear line command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.RollUp2">
            <summary>
            The roll up2 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.RollUp3">
            <summary>
            The roll up3 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.RollUp4">
            <summary>
            The roll up4 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.StartCaption">
            <summary>
            The start caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.StartNonCaption">
            <summary>
            The star non caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.ResumeNonCaption">
            <summary>
            The resume non caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.ClearScreen">
            <summary>
            The clear screen command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.NewLine">
            <summary>
            The new line command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.ClearBuffer">
            <summary>
            The clear buffer command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCMiscCommandType.EndCaption">
            <summary>
            The end caption command
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CCPacketType">
            <summary>
            Defines Closed-Captioning Packet types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.Unrecognized">
            <summary>
            The unrecognized packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.NullPad">
            <summary>
            The null pad packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.XdsClass">
            <summary>
            The XDS class packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.MiscCommand">
            <summary>
            The misc command packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.Text">
            <summary>
            The text packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.MidRow">
            <summary>
            The mid row packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.Preamble">
            <summary>
            The preamble packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.Color">
            <summary>
            The color packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.Charset">
            <summary>
            The charset packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCPacketType.Tabs">
            <summary>
            The tabs packet type
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CCStyleType">
            <summary>
            Enumerates the differen Closed-Captioning Styles
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.None">
            <summary>
            The none style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.White">
            <summary>
            The white style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteUnderline">
            <summary>
            The white underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.Green">
            <summary>
            The green style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.GreenUnderline">
            <summary>
            The green underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.Blue">
            <summary>
            The blue style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.BlueUnderline">
            <summary>
            The blue underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.Cyan">
            <summary>
            The cyan style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.CyanUnderline">
            <summary>
            The cyan underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.Red">
            <summary>
            The red style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.RedUnderline">
            <summary>
            The red underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.Yellow">
            <summary>
            The yellow style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.YellowUnderline">
            <summary>
            The yellow underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.Magenta">
            <summary>
            The magenta style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.MagentaUnderline">
            <summary>
            The magenta underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteItalics">
            <summary>
            The white italics style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteItalicsUnderline">
            <summary>
            The white italics underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent0">
            <summary>
            The white indent0 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent0Underline">
            <summary>
            The white indent0 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent4">
            <summary>
            The white indent4 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent4Underline">
            <summary>
            The white indent4 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent8">
            <summary>
            The white indent8 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent8Underline">
            <summary>
            The white indent8 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent12">
            <summary>
            The white indent12 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent12Underline">
            <summary>
            The white indent12 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent16">
            <summary>
            The white indent16 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent16Underline">
            <summary>
            The white indent16 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent20">
            <summary>
            The white indent20 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent20Underline">
            <summary>
            The white indent20 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent24">
            <summary>
            The white indent24 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent24Underline">
            <summary>
            The white indent24 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent28">
            <summary>
            The white indent28 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCStyleType.WhiteIndent28Underline">
            <summary>
            The white indent28 underline style
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CCXdsClassType">
            <summary>
            Defines Closed-Captioning XDS Packet Classes
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.None">
            <summary>
            The none XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.CurrentStart">
            <summary>
            The current start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.CurrentContinue">
            <summary>
            The current continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.FutureStart">
            <summary>
            The future start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.FutureContinue">
            <summary>
            The future continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.ChannelStart">
            <summary>
            The channel start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.ChannelContinue">
            <summary>
            The channel continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.MiscStart">
            <summary>
            The misc start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.MiscContinue">
            <summary>
            The misc continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.PublicServiceStart">
            <summary>
            The public service start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.PublicServiceContinue">
            <summary>
            The public service continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.ReservedStart">
            <summary>
            The reserved start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.ReservedContinue">
            <summary>
            The reserved continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.PrivateStart">
            <summary>
            The private start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.PrivateContinue">
            <summary>
            The private continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CCXdsClassType.EndAll">
            <summary>
            The end all XDS Class
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.ClosedCaptionChannel">
            <summary>
            Enumerates the 4 different CC channels
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.ClosedCaptionChannel.CCP">
            <summary>
            No channel specified -- use previous
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.ClosedCaptionChannel.CC1">
            <summary>
            Field 1, Channel 1
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.ClosedCaptionChannel.CC2">
            <summary>
            Field 1, Channel 2
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.ClosedCaptionChannel.CC3">
            <summary>
            Field 2, Channel 1
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.ClosedCaptionChannel.CC4">
            <summary>
            Field 2, Channel 2
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket">
            <summary>
            Represents a 3-byte packet of closed-captioning data in EIA-608 format.
            See: http://jackyjung.tistory.com/attachment/499e14e28c347DB.pdf
            </summary>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.#ctor(System.TimeSpan,System.Byte*,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket"/> class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="source">The source.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.#ctor(System.TimeSpan,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket"/> class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="header">The header.</param>
            <param name="d0">The d0.</param>
            <param name="d1">The d1.</param>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Data">
            <summary>
            Gets the original packet data.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.D0">
            <summary>
            Gets the first of the two-byte packet data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.D1">
            <summary>
            Gets the second of the two-byte packet data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Timestamp">
            <summary>
            Gets the timestamp this packet applies to.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.FieldParity">
            <summary>
            Gets the NTSC field (1 or 2).
            0 for unknown/null packet
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.FieldChannel">
            <summary>
            Gets the channel. 0 for any, 1 or 2 for specific channel toggle.
            0 just means to use what a prior packet had specified.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Channel">
            <summary>
            Gets the channel CC1, CC2, CC3, or CC4.
            Returns None when not yet computed
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.PacketType">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Tabs">
            <summary>
            Gets the number of tabs, if the packet type is of Tabs
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.MiscCommand">
            <summary>
            Gets the Misc Command, if the packet type is of Misc Command
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Color">
            <summary>
            Gets the Color, if the packet type is of Color
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.MidRowStyle">
            <summary>
            Gets the Style, if the packet type is of Mid Row Style
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.XdsClass">
            <summary>
            Gets the XDS Class, if the packet type is of XDS
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.PreambleRow">
            <summary>
            Gets the Preamble Row Number (1 through 15), if the packet type is of Preamble
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.PreambleStyle">
            <summary>
            Gets the Style, if the packet type is of Preamble
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Text">
            <summary>
            Gets the text, if the packet type is of text.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.ComputeChannel(System.Int32,System.Int32)">
            <summary>
            Computes the CC channel.
            </summary>
            <param name="fieldPartity">The field partity.</param>
            <param name="fieldChannel">The field channel.</param>
            <returns>The CC channel according to the parity and channel</returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.HeaderHasMarkers(System.Byte)">
            <summary>
            Checks that the header byte starts with 11111b (5 ones binary)
            </summary>
            <param name="data">The data.</param>
            <returns>If header has markers</returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.IsHeaderValidFalgSet(System.Byte)">
            <summary>
            Determines whether the valid flag of the header byte is set.
            </summary>
            <param name="data">The data.</param>
            <returns>
              <c>true</c> if [is header valid falg set] [the specified data]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.GetHeaderFieldType(System.Byte)">
            <summary>
            Gets the NTSC field type (1 or 2).
            Returns 0 for unknown.
            </summary>
            <param name="data">The data.</param>
            <returns>The field type</returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.IsEmptyChannelData(System.Byte,System.Byte)">
            <summary>
            Determines whether the data is null padding
            </summary>
            <param name="d0">The d0.</param>
            <param name="d1">The d1.</param>
            <returns>
              <c>true</c> if [is empty channel data] [the specified d0]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.DropParityBit(System.Byte)">
            <summary>
            Drops the parity bit from the data byte.
            </summary>
            <param name="input">The input.</param>
            <returns>The byte without a parity bit.</returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.ToEia608Char(System.Byte)">
            <summary>
            Converst an ASCII character code to an EIA-608 char (in Unicode)
            </summary>
            <param name="input">The input.</param>
            <returns>The charset char.</returns>
        </member>
        <member name="T:Unosquare.FFME.Commands.CloseCommand">
            <summary>
            Implements the logic to close a media stream.
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.CloseCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.CloseCommand" /> class.
            </summary>
            <param name="manager">The media element.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.CloseCommand.ExecuteInternal">
            <summary>
            Executes this command.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.MediaCommand">
            <summary>
            Represents a command to be executed against an intance of the MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager,Unosquare.FFME.Commands.MediaCommandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.MediaCommand" /> class.
            </summary>
            <param name="manager">The command manager.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommand.Manager">
            <summary>
            Gets the associated parent command manager
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommand.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommand.HasCompleted">
            <summary>
            Gets a value indicating whether this command is marked as completed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommand.TaskContext">
            <summary>
            Gets the task that this command will run.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommand.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
              <c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.Complete">
            <summary>
            Marks the command as completed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.StartAsync">
            <summary>
            Executes the code for the command asynchronously
            </summary>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.RunSynchronously">
            <summary>
            Executes the command Synchronously.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Commands.MediaCommandManager">
            <summary>
            Represents a single point of contact for media command excution.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.MediaCommandManager"/> class.
            </summary>
            <param name="mediaEngine">The media element.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommandManager.PendingCount">
            <summary>
            Gets the number of commands pending execution.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommandManager.MediaCore">
            <summary>
            Gets the core platform independent player component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommandManager.CanExecuteCommands">
            <summary>
            Gets a value indicating whether commands can be executed.
            Returns false if an Opening or Closing Command is in progress.
            </summary>
            <value>
              <c>true</c> if this instance can execute commands; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.OpenAsync(System.Uri)">
            <summary>
            Opens the specified URI.
            This command gets processed in a threadpool thread asynchronously.
            </summary>
            <param name="uri">The URI.</param>
            <returns>The asynchronous task</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.CloseAsync">
            <summary>
            Closes the specified media.
            This command gets processed in a threadpool thread asynchronously.
            </summary>
            <returns>Returns the background task.</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.PlayAsync">
            <summary>
            Starts playing the open media URI.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.PauseAsync">
            <summary>
            Pauses the media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.StopAsync">
            <summary>
            Pauses and rewinds the media
            This command invalidates all queued commands
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.EnqueueSeek(System.TimeSpan)">
            <summary>
            Seeks to the specified position within the media.
            This command is a queued command
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.EnqueueSpeedRatio(System.Double)">
            <summary>
            Sets the playback speed ratio.
            This command is a queued command
            </summary>
            <param name="targetSpeedRatio">The target speed ratio.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.ProcessNext">
            <summary>
            Processes the next command in the command queue.
            This method is called in every block rendering cycle.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.PendingCountOf(Unosquare.FFME.Commands.MediaCommandType)">
            <summary>
            Gets the pending count of the given command type.
            </summary>
            <param name="t">The t.</param>
            <returns>The amount of commands of the given type</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.EnqueueCommand(Unosquare.FFME.Commands.MediaCommand)">
            <summary>
            Enqueues the command for execution.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.DumpQueue(System.String,System.Boolean)">
            <summary>
            Outputs the state of the queue
            </summary>
            <param name="operation">The operation.</param>
            <param name="outputEmpty">if set to <c>true</c> [output empty].</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.ClearCommandQueue">
            <summary>
            Clears the command queue.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.MediaCommandType">
            <summary>
            Enumerates the different available Media Command Types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Open">
            <summary>
            The open command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Seek">
            <summary>
            The seek command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Play">
            <summary>
            The play command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Pause">
            <summary>
            The pause command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Stop">
            <summary>
            The stop command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Close">
            <summary>
            The close command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.SetSpeedRatio">
            <summary>
            The set speed ratio command
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.OpenCommand">
            <summary>
            Implements the logic to open a media stream.
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.OpenCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.OpenCommand" /> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.OpenCommand.Source">
            <summary>
            Gets the source uri of the media stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.OpenCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.PauseCommand">
            <summary>
            Implements the logic to pause the media stream
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.PauseCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.PauseCommand" /> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.PauseCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.PlayCommand">
            <summary>
            Implements the logic to start or resume media playback
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.PlayCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.PlayCommand" /> class.
            </summary>
            <param name="manager">The media element.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.PlayCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.SeekCommand">
            <summary>
            Implements the logic to seek on the media stream
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.SeekCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.SeekCommand" /> class.
            </summary>
            <param name="manager">The media element.</param>
            <param name="targetPosition">The target position.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.SeekCommand.TargetPosition">
            <summary>
            Gets or sets the target position.
            </summary>
            <value>
            The target position.
            </value>
        </member>
        <member name="M:Unosquare.FFME.Commands.SeekCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.SpeedRatioCommand">
            <summary>
            A command to change speed ratio asynchronously
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.SpeedRatioCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.SpeedRatioCommand"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="speedRatio">The speed ratio.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.SpeedRatioCommand.SpeedRatio">
            <summary>
            The target speed ratio
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.SpeedRatioCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.StopCommand">
            <summary>
            Implements the logic to pause and rewind the media stream
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.StopCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.StopCommand" /> class.
            </summary>
            <param name="manager">The media element.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.StopCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.FFAudioParams">
            <summary>
            Contains audio format properties essential
            to audio processing and resampling in FFmpeg libraries
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFAudioParams.Output">
            <summary>
            The standard output audio spec
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Core.FFAudioParams"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Core.FFAudioParams"/> class from being created.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.#ctor(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFAudioParams"/> class.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.ChannelLayout">
            <summary>
            Gets the channel layout.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.SamplesPerChannel">
            <summary>
            Gets the samples per channel.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.SampleRate">
            <summary>
            Gets the audio sampling rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.Format">
            <summary>
            Gets the sample format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.BufferLength">
            <summary>
            Gets the length of the buffer required to store
            the samples in the current format.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.CreateSource(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Creates a source audio spec based on the info in the given audio frame
            </summary>
            <param name="frame">The frame.</param>
            <returns>The audio parameters</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.CreateTarget(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Creates a target audio spec using the sample quantities provided
            by the given source audio frame
            </summary>
            <param name="frame">The frame.</param>
            <returns>The audio parameters</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.AreCompatible(Unosquare.FFME.Core.FFAudioParams,Unosquare.FFME.Core.FFAudioParams)">
            <summary>
            Determines if the audio specs are compatible between them.
            They must share format, channel count, layout and sample rate
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>True if the params are compatible, flase otherwise.</returns>
        </member>
        <member name="T:Unosquare.FFME.Core.FFDictionary">
            <summary>
            An AVDictionary management class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFDictionary.IsDisposed">
            <summary>
            To detect redundant Dispose calls
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionary"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionary"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionary.Count">
            <summary>
            Gets the number of elements in the dictionary
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionary.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.ToDictionary(FFmpeg.AutoGen.AVDictionary*)">
            <summary>
            Converts the AVDictionary to a regular dictionary.
            </summary>
            <param name="dictionary">The dictionary to convert from.</param>
            <returns>the converterd dictionary</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.GetEntry(FFmpeg.AutoGen.AVDictionary*,System.String,System.Boolean)">
            <summary>
            A wrapper for the av_dict_get method
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>The Entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Fill(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Fills this dictionary with a set of options
            </summary>
            <param name="other">The other dictionary (source)</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.First">
            <summary>
            Gets the first entry. Null if no entries.
            </summary>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Next(Unosquare.FFME.Core.FFDictionaryEntry)">
            <summary>
            Gets the next entry based on the provided prior entry.
            </summary>
            <param name="prior">The prior entry.</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.HasKey(System.String,System.Boolean)">
            <summary>
            Determines if the given key exists in the dictionary
            </summary>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.GetEntry(System.String,System.Boolean)">
            <summary>
            Gets the entry given the key.
            </summary>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Get(System.String)">
            <summary>
            Gets the value with specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Set(System.String,System.String)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Set(System.String,System.String,System.Boolean)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="dontOverwrite">if set to <c>true</c> [dont overwrite].</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Remove(System.String)">
            <summary>
            Removes the entry with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.FFDictionaryEntry">
            <summary>
            An AVDictionaryEntry wrapper
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionaryEntry.#ctor(FFmpeg.AutoGen.AVDictionaryEntry*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionaryEntry"/> class.
            </summary>
            <param name="entryPointer">The entry pointer.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionaryEntry.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionaryEntry.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.FFInterop">
            <summary>
            Provides a set of utilities to perfrom logging, text formatting,
            conversion and other handy calculations.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFInterop.IsInitialized">
            <summary>
            True when libraries were initialized correctly.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFInterop.LibrariesPath">
            <summary>
            Gets the libraries path. Only filled when initialized correctly.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFInterop.LibraryIdentifiers">
            <summary>
            Gets the bitwise FFmpeg library identifiers that were loaded.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.Initialize(System.String,System.Int32)">
            <summary>
            Registers FFmpeg library and initializes its components.
            It only needs to be called once but calling it more than once
            has no effect. Returns the path that FFmpeg was registered from.
            This method is thread-safe.
            </summary>
            <param name="overridePath">The override path.</param>
            <param name="libIdentifiers">The bitwaise flag identifiers corresponding to the libraries.</param>
            <returns>
            Returns true if it was a new initialization and it succeeded. False if there was no need to initialize
            as there is already a valid initialization.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">When ffmpeg libraries are not found</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.DecodeMessage(System.Int32)">
            <summary>
            Gets the FFmpeg error mesage based on the error code
            </summary>
            <param name="errorCode">The code.</param>
            <returns>The decoded error message</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.PtrToStringUTF8(System.Byte*)">
            <summary>
            Converts a byte pointer to a UTF8 encoded string.
            </summary>
            <param name="stringAddress">The pointer to the starting character</param>
            <returns>The string</returns>
        </member>
        <member name="T:Unosquare.FFME.Core.FFLibrary">
            <summary>
            Defines FFmpeg library metadata and access.
            It allows for the loading of individual libraries.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFLibrary.LoadLock">
            <summary>
            The load lock preventing libraries to load at the same time.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFLibrary.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Core.FFLibrary"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFLibrary.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFLibrary" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <param name="flagId">The flag identifier.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.All">
            <summary>
            Gets all the libraries as a collection.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVCodec">
            <summary>
            Gets the AVCodec library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVFormat">
            <summary>
            Gets the AVFormat library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVUtil">
            <summary>
            Gets the AVUtil library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibSWResample">
            <summary>
            Gets the SWResample library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibSWScale">
            <summary>
            Gets the SWScale library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVDevice">
            <summary>
            Gets the AVDevice library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVFilter">
            <summary>
            Gets the AVFilter library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.FlagId">
            <summary>
            Gets the flag identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.Name">
            <summary>
            Gets the name of the library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.BasePath">
            <summary>
            Gets the base path from where the library was loaded.
            Returns null if it has not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.Version">
            <summary>
            Gets the library version.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.Reference">
            <summary>
            Gets the pointer reference to the library.
            </summary>>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.IsLoaded">
            <summary>
            Gets a value indicating whether the library has already been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LoadErrorCode">
            <summary>
            Gets the load error code. 0 for success.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFLibrary.Load(System.String)">
            <summary>
            Loads the library from the specified path.
            </summary>
            <param name="basePath">The base path.</param>
            <returns>True if the registration was successful</returns>
            <exception cref="T:System.InvalidOperationException">When library has already been loaded.</exception>
        </member>
        <member name="T:Unosquare.FFME.Core.FFLibrary.Names">
            <summary>
            Defines the library names as constants
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.FFLockManager">
            <summary>
            A lock manager for FFmpeg libraries
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFLockManager.RegisterLock">
            <summary>
            The register lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFLockManager.FFmpegOpDone">
            <summary>
            Keeps track of the unmanaged and managed locking structures for the FFmpeg libraries to use.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFLockManager.m_HasRegistered">
            <summary>
            The registration state
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLockManager.HasRegistered">
            <summary>
            Gets a value indicating whether the lock manager has registered.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLockManager.LockOpCallback">
            <summary>
            Gets the FFmpeg lock manager callback.
            Example: ffmpeg.av_lockmgr_register(FFLockManager.LockOpCallback);
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFLockManager.Register">
            <summary>
            Registers the lock manager. If it has been registered it does not do it again.
            Thi method is thread-safe.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFLockManager.OnFFmpegLockOp(System.Void**,FFmpeg.AutoGen.AVLockOp)">
            <summary>
            Manages FFmpeg Multithreaded locking
            </summary>
            <param name="mutex">The mutex.</param>
            <param name="lockingOperation">The op.</param>
            <returns>
            0 for success, 1 for error
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Core.LoggingWorker">
            <summary>
            A queue-based logger that automatically stats a background timer that
            empties the queue constantly, at low priority.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.LoggingWorker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Core.LoggingWorker"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.LoggingWorker.FFmpegLogCallback">
            <summary>
            Gets the FFmpeg log callback method.
            Example: ffmpeg.av_log_set_callback(LoggingWorker.FFmpegLogCallback);
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.LoggingWorker.ConnectToFFmpeg">
            <summary>
            Starts to listen to FFmpeg logging messages.
            This method is not thread-safe.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.LoggingWorker.Log(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaLogMessageType,System.String)">
            <summary>
            Logs the specified message. This the genric logging mechanism available to all classes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">sender</exception>
            <exception cref="T:System.ArgumentNullException">When sender is null</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.LoggingWorker.LogRenderBlock(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaBlock,System.TimeSpan,System.Int32)">
            <summary>
            Logs a block rendering operation as a Trace Message
            if the debugger is attached.
            </summary>
            <param name="mediaCore">The media engine.</param>
            <param name="block">The block.</param>
            <param name="clockPosition">The clock position.</param>
            <param name="renderIndex">Index of the render.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.LoggingWorker.LogGlobal(Unosquare.FFME.Shared.MediaLogMessageType,System.String)">
            <summary>
            Logs the specified message. This the way ffmpeg messages are logged.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.LoggingWorker.OnFFmpegMessageLogged(System.Void*,System.Int32,System.String,System.Byte*)">
            <summary>
            Log message callback from ffmpeg library.
            </summary>
            <param name="p0">The p0.</param>
            <param name="level">The level.</param>
            <param name="format">The format.</param>
            <param name="vl">The vl.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.RC">
            <summary>
            A reference counter to keep track of unmanaged objects
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.SyncLock">
            <summary>
            The synchronization lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.m_Current">
            <summary>
            The current reference counter instance
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.Instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.RC.UnmanagedType">
            <summary>
            The types of tracked unmanaged types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.Packet">
            <summary>
            The packet
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.Frame">
            <summary>
            The frame
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.FilterGraph">
            <summary>
            The filter graph
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.SwrContext">
            <summary>
            The SWR context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.CodecContext">
            <summary>
            The codec context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.SwsContext">
            <summary>
            The SWS context
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.Current">
            <summary>
            Gets the singleton instance of the reference counter
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.InstancesByLocation">
            <summary>
            Gets the number of instances by location.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(Unosquare.FFME.Core.RC.UnmanagedType,System.IntPtr,System.String)">
            <summary>
            Adds the specified unmanaged object reference.
            </summary>
            <param name="t">The t.</param>
            <param name="ptr">The r.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Remove(System.IntPtr)">
            <summary>
            Removes the specified unmanaged object reference
            </summary>
            <param name="ptr">The PTR.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Remove(System.Void*)">
            <summary>
            Removes the specified unmanaged object reference.
            </summary>
            <param name="ptr">The unmanaged object reference.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVPacket*,System.String)">
            <summary>
            Adds the specified packet.
            </summary>
            <param name="packet">The packet.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.SwrContext*,System.String)">
            <summary>
            Adds the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.SwsContext*,System.String)">
            <summary>
            Adds the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVCodecContext*,System.String)">
            <summary>
            Adds the specified codec.
            </summary>
            <param name="codec">The codec.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVFrame*,System.String)">
            <summary>
            Adds the specified frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVFilterGraph*,System.String)">
            <summary>
            Adds the specified filtergraph.
            </summary>
            <param name="filtergraph">The filtergraph.</param>
            <param name="location">The location.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.RC.ReferenceEntry">
            <summary>
            A reference entry
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.RealTimeClock">
            <summary>
            A time measurement artifact.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.RealTimeClock"/> class.
            The clock starts paused and at the 0 position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RealTimeClock.Position">
            <summary>
            Gets or sets the clock position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RealTimeClock.IsRunning">
            <summary>
            Gets a value indicating whether the clock is running.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RealTimeClock.SpeedRatio">
            <summary>
            Gets or sets the speed ratio at which the clock runs.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Update(System.TimeSpan)">
            <summary>
            Sets a new position value atomically
            </summary>
            <param name="value">The new value that the position porperty will hold.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Play">
            <summary>
            Starts or resumes the clock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Pause">
            <summary>
            Pauses the clock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Reset">
            <summary>
            Sets the clock position to 0 and stops it.
            The speed ratio is not modified.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.AudioComponent">
            <summary>
            Provides audio sample extraction, decoding and scaling functionality.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.AudioComponent.Scaler">
            <summary>
            Holds a reference to the audio resampler
            This resampler gets disposed upon disposal of this object.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.AudioComponent.LastSourceSpec">
            <summary>
            Used to determine if we have to reset the scaler parameters
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.AudioComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.Channels">
            <summary>
            Gets the number of audio channels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.SampleRate">
            <summary>
            Gets the audio sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.BitsPerSample">
            <summary>
            Gets the bits per sample.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Shared.MediaBlock})">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="siblings">The sibling blocks that may help guess some additional parameters for the input frame.</param>
            <returns>
            Return the updated output frame
            </returns>
            <exception cref="T:System.ArgumentNullException">input</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.CreateFrameSource(FFmpeg.AutoGen.AVFrame*@)">
            <summary>
            Creates a frame source object given the raw FFmpeg frame reference.
            </summary>
            <param name="frame">The raw FFmpeg frame pointer.</param>
            <returns>The media frame</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.DestroyFiltergraph">
            <summary>
            Destroys the filtergraph releasing unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.ComputeFilterArguments(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Computes the frame filter arguments that are appropriate for the audio filtering chain.
            </summary>
            <param name="frame">The frame.</param>
            <returns>The base filter arguments</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.InitializeFilterGraph(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            If necessary, disposes the existing filtergraph and creates a new one based on the frame arguments.
            </summary>
            <param name="frame">The frame.</param>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">
            avfilter_graph_create_filter
            or
            avfilter_graph_create_filter
            or
            avfilter_link
            or
            avfilter_graph_parse
            or
            avfilter_graph_config
            </exception>
        </member>
        <member name="T:Unosquare.FFME.Decoding.AudioFrame">
            <summary>
            Represents a wrapper from an unmanaged FFmpeg audio frame
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.#ctor(FFmpeg.AutoGen.AVFrame*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.AudioFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.AudioFrame"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.CodecOption">
            <summary>
            A single codec option along with a stream specifier.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.CodecOption.#ctor(Unosquare.FFME.Decoding.StreamSpecifier,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.CodecOption"/> class.
            </summary>
            <param name="spec">The spec.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.CodecOption.StreamSpecifier">
            <summary>
            Gets or sets the stream specifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.CodecOption.Key">
            <summary>
            Gets or sets the option name
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.CodecOption.Value">
            <summary>
            Gets or sets the option value.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.HardwareAccelerator.GetFormatCallback">
            <summary>
            The get format callback
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Decoding.HardwareAccelerator"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Decoding.HardwareAccelerator"/> class from being created.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.All">
            <summary>
            A dicitionary containing all Accelerators by pixel format
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.Dxva2">
            <summary>
            Gets the dxva2 accelerator.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.Cuda">
            <summary>
            Gets the CUDA video accelerator.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.Name">
            <summary>
            Gets the name of the HW accelerator.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.RequiresTransfer">
            <summary>
            Gets a value indicating whether the frame requires the transfer from
            the hardware to RAM
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.PixelFormat">
            <summary>
            Gets the hardware output pixel format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.DeviceType">
            <summary>
            Gets the type of the hardware device.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.AttachDevice(Unosquare.FFME.Decoding.VideoComponent)">
            <summary>
            Attaches a hardware device context to the specified video component.
            </summary>
            <param name="component">The component.</param>
            <exception cref="T:System.Exception">Throws when unable to initialize the hardware device</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.DetachDevice(Unosquare.FFME.Decoding.VideoComponent)">
            <summary>
            Detaches and disposes the hardware device context from the specified video component
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.ExchangeFrame(FFmpeg.AutoGen.AVCodecContext*,FFmpeg.AutoGen.AVFrame*,System.Boolean@)">
            <summary>
            Downloads the frame from the hardware into a software frame if possible.
            The input hardware frame gets freed and the return value will point to the new software frame
            </summary>
            <param name="codecContext">The codec context.</param>
            <param name="input">The input.</param>
            <param name="comesFromHardware">if set to <c>true</c> [comes from hardware] otherwise, hardware decoding was not perfomred.</param>
            <returns>
            The frame downloaded from the device into RAM
            </returns>
            <exception cref="T:System.Exception">Failed to transfer data to output frame</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.GetPixelFormat(FFmpeg.AutoGen.AVCodecContext*,FFmpeg.AutoGen.AVPixelFormat*)">
            <summary>
            Gets the pixel format.
            Port of (get_format) method in ffmpeg.c
            </summary>
            <param name="avctx">The codec context.</param>
            <param name="pix_fmts">The pixel formats.</param>
            <returns>The real pixel format that the codec will be using</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaComponent">
            <summary>
            Represents a media component of a given media type within a
            media container. Derived classes must implement frame handling
            logic.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.CodecContext">
            <summary>
            Holds a reference to the Codec Context.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.Stream">
            <summary>
            Holds a reference to the associated input context stream
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.CodecOpenLock">
            <summary>
            Related to issue 94, looks like FFmpeg requires exclusive access when calling avcodec_open2()
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.Packets">
            <summary>
            Contains the packets pending to be sent to the decoder
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.SentPackets">
            <summary>
            The packets that have been sent to the decoder. We keep track of them in order to dispose them
            once a frame has been decoded.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.IsDisposed">
            <summary>
            Detects redundant, unmanaged calls to the Dispose method.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.m_LifetimeBytesRead">
            <summary>
            Holds total bytes read in the lifetime of this object
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">The container exception.</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.MediaComponent"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Container">
            <summary>
            Gets the media container associated with this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StreamIndex">
            <summary>
            Gets the index of the associated stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StartTimeOffset">
            <summary>
            Gets the component's stream start timestamp as reported
            by the start time of the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.FirstPacketDts">
            <summary>
            Gets the first packet DTS.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Duration">
            <summary>
            Gets the duration of this stream component.
            If there is no such information it will return TimeSpan.MinValue
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.PacketBufferLength">
            <summary>
            Gets the current length in bytes of the
            packet buffer. Limit your Reads to something reasonable before
            this becomes too large.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.PacketBufferCount">
            <summary>
            Gets the number of packets in the queue.
            Decode packets until this number becomes 0.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.LifetimeBytesRead">
            <summary>
            Gets the total amount of bytes read by this component in the lifetime of this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.CodecId">
            <summary>
            Gets the ID of the codec for this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.CodecName">
            <summary>
            Gets the name of the codec for this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Bitrate">
            <summary>
            Gets the bitrate of this component as reported by the codec context.
            Returns 0 for unknown.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StreamInfo">
            <summary>
            Gets the stream information.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.ClearPacketQueues">
            <summary>
            Clears the pending and sent Packet Queues releasing all memory held by those packets.
            Additionally it flushes the codec buffered packets.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.SendEmptyPacket">
            <summary>
            Sends a special kind of packet (an empty packet)
            that tells the decoder to enter draining mode.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.SendPacket(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Pushes a packet into the decoding Packet Queue
            and processes the packet in order to try to decode
            1 or more frames.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.ReceiveFrames">
            <summary>
            Decodes the next packet in the packet queue in this media component.
            Returns the decoded frames.
            </summary>
            <returns>The received Media Frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Shared.MediaBlock})">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="siblings">The sibling blocks that may help guess some additional parameters for the input frame.</param>
            <returns>
            Return the updated output frame
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.IsEmptyPacket(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Determines whether the specified packet is a Null Packet (data = null, size = 0)
            These null packets are used to read multiple frames from a single packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>
              <c>true</c> if [is empty packet] [the specified packet]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.CreateFrameSource(FFmpeg.AutoGen.AVSubtitle*)">
            <summary>
            Creates a frame source object given the raw FFmpeg subtitle reference.
            </summary>
            <param name="frame">The raw FFmpeg subtitle pointer.</param>
            <returns>The media frame</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.CreateFrameSource(FFmpeg.AutoGen.AVFrame*@)">
            <summary>
            Creates a frame source object given the raw FFmpeg frame reference.
            </summary>
            <param name="frame">The raw FFmpeg frame pointer.</param>
            <returns>The media frame</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.CloseComponent">
            <summary>
            Releases the existing codec context and clears and disposes the packet queues.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.DecodeNextPacketInternal">
            <summary>
            Receives 0 or more frames from the next available packet in the Queue.
            This sends the first available packet to dequeue to the decoder
            and uses the decoded frames (if any) to their corresponding
            ProcessFrame method.
            </summary>
            <returns>The list of frames</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaComponentSet">
            <summary>
            Represents a set of Audio, Video and Subtitle components.
            This class is useful in order to group all components into
            a single set. Sending packets is automatically handled by
            this class. This class is thread safe.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponentSet.Items">
            <summary>
            The internal Components
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponentSet.SyncLock">
            <summary>
            The synchronize lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponentSet.CachedComponents">
            <summary>
            Provides a cached array to the components backing the All property.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponentSet.IsDisposed">
            <summary>
            To detect redundant Dispose calls
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaComponentSet"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.MediaTypes">
            <summary>
            Gets the available component media types.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.All">
            <summary>
            Gets all the components in a read-only collection.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Main">
            <summary>
            Gets the main media component of the stream to which time is synchronized.
            By order of priority, first Audio, then Video
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Video">
            <summary>
            Gets the video component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Audio">
            <summary>
            Gets the audio component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Subtitles">
            <summary>
            Gets the subtitles component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.FirstPacketDts">
            <summary>
            Gets the first packet DTS.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.FisrtPacketStreamIndex">
            <summary>
            Gets the stream index of the first packet received.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.FirstPacketPosition">
            <summary>
            Gets the first packet byte position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.PacketBufferLength">
            <summary>
            Gets the current length in bytes of the packet buffer.
            These packets are the ones that have not been yet deecoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.PacketBufferCount">
            <summary>
            Gets the number of packets that have not been
            fed to the decoders.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.LifetimeBytesRead">
            <summary>
            Gets the total bytes read by all components in the lifetime of this object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasVideo">
            <summary>
            Gets a value indicating whether this instance has a video component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasAudio">
            <summary>
            Gets a value indicating whether this instance has an audio component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasSubtitles">
            <summary>
            Gets a value indicating whether this instance has a subtitles component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Item(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Gets or sets the <see cref="T:Unosquare.FFME.Decoding.MediaComponent"/> with the specified media type.
            Setting a new component on an existing media type component will throw.
            Getting a non existing media component fro the given media type will return null.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <returns>The media component</returns>
            <exception cref="T:System.ArgumentException">When the media type is invalid</exception>
            <exception cref="T:System.ArgumentNullException">MediaComponent</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.SendPacket(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Sends the specified packet to the correct component by reading the stream index
            of the packet that is being sent. No packet is sent if the provided packet is set to null.
            Returns the media type of the component that accepted the packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>The media type</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.SendEmptyPackets">
            <summary>
            Sends an empty packet to all media components.
            When an EOF/EOS situation is encountered, this forces
            the decoders to enter drainig mode until all frames are decoded.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.ClearPacketQueues">
            <summary>
            Clears the packet queues for all components.
            Additionally it flushes the codec buffered packets.
            This is useful after a seek operation is performed or a stream
            index is changed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.RemoveComponent(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Removes the component of specified media type (if registered).
            It calls the dispose method of the media component too.
            </summary>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaContainer">
            <summary>
            A container capable of opening an input url,
            reading packets from it, decoding frames, seeking, and pausing and resuming network streams
            Code based on https://raw.githubusercontent.com/FFmpeg/FFmpeg/release/3.2/ffplay.c
            The method pipeline should be:
            1. Set Options (or don't, for automatic options) and Initialize,
            2. Perform continuous packet reads,
            3. Perform continuous frame decodes
            4. Perform continuous block materialization
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.ExceptionMessageNoInputContext">
            <summary>
            The exception message no input context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.ReadSyncRoot">
            <summary>
            The read synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.DecodeSyncRoot">
            <summary>
            The decode synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.ConvertSyncRoot">
            <summary>
            The convert synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.RequiresPictureAttachments">
            <summary>
            Hold the value for the internal property with the same name.
            Picture attachments are required when video streams support them
            and these attached packets must be read before reading the first frame
            of the stream and after seeking.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.StreamReadInterruptCallback">
            <summary>
            The stream read interrupt callback.
            Used to detect read rimeouts.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.StreamReadInterruptStartTime">
            <summary>
            The stream read interrupt start time.
            When a read operation is started, this is set to the ticks of UTC now.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.SignalAbortReadsRequested">
            <summary>
            The signal to request the abortion of the following read operation
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.SignalAbortReadsAutoReset">
            <summary>
            If set to true, it will reset the abort requested flag to false.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.#ctor(System.String,Unosquare.FFME.Shared.StreamOptions,Unosquare.FFME.Shared.IMediaLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaContainer" /> class.
            </summary>
            <param name="mediaUrl">The media URL.</param>
            <param name="streamOptions">The stream options.</param>
            <param name="parent">The logger.</param>
            <exception cref="T:System.ArgumentNullException">mediaUrl</exception>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsDisposed">
            <summary>
            To detect redundat Dispose calls
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Parent">
            <summary>
            Logging Messages will be sent to this parent object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaUrl">
            <summary>
            Gets the media URL. This is the input url, file or device that is read
            by this container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StreamOptions">
            <summary>
            The stream initialization options.
            Options are applied when creating the container.
            After initialization, changing the options has no effect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaOptions">
            <summary>
            Represetnts options that applied before initializing media components and their corresponding
            codecs. Once the container has created the media components, changing these options will have no effect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaInfo">
            <summary>
            Provides stream, chapter and program info held by this container.
            This property is null if the the stream has not been opened.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaFormatName">
            <summary>
            Gets the name of the media format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaBitrate">
            <summary>
            Gets the media bitrate (bits per second). Returns 0 if not available.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Metadata">
            <summary>
            Holds the metadata of the media file when the stream is initialized.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsInitialized">
            <summary>
            Gets a value indicating whether an Input Context has been initialize.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaDuration">
            <summary>
            Gets the duration of the media.
            If this information is not available (i.e. realtime media) it will
            be set to TimeSpan.MinValue
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsAtEndOfStream">
            <summary>
            Will be set to true whenever an End Of File situation is reached.
            </summary>
            <value>
              <c>true</c> if this instance is at end of stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StreamPosition">
            <summary>
            Gets the byte position at which the stream is being read.
            Please note that this property gets updated after every Read.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsStreamSeekable">
            <summary>
            Gets a value indicating whether the underlying media is seekable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsLiveStream">
            <summary>
            Gets a value indicating whether this container represents live media.
            If the stream is classified as a network stream and it is not seekable, then this property will return true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsNetworkStream">
            <summary>
            Gets a value indicating whether the input stream is a network stream.
            If the format name is rtp, rtsp, or sdp or if the url starts with udp:, http:, https:, tcp:, or rtp:
            then this property will be set to true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Components">
            <summary>
            Provides direct access to the individual Media components of the input stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsReadAborted">
            <summary>
            Gets a value indicating whether reads are in the aborted state.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaStartTimeOffset">
            <summary>
            Gets the media start time by which all component streams are offset.
            Typically 0 but it could be something other than 0.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.InputContext">
            <summary>
            Holds a reference to the input context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StartSeekTimestamp">
            <summary>
            Gets the seek start timestamp of the main component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StartSeekStreamIndex">
            <summary>
            Gets the index of the seek stream to seek on for the BOF.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StartSeekPosition">
            <summary>
            Gets the start seek byte position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StateLastReadTimeUtc">
            <summary>
            Gets the time the last packet was read from the input
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StateRequiresReadDelay">
            <summary>
            Gets a value indicating whether a packet read delay witll be enforced.
            RSTP formats or MMSH Urls will have this property set to true.
            Reading packets will block for at most 10 milliseconds depending on the last read time.
            This is a hack according to the source code in ffplay.c
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StateRequiresPictureAttachments">
            <summary>
            Picture attachments are required when video streams support them
            and these attached packets must be read before reading the first frame
            of the stream and after seeking. This property is not part of the public API
            and is meant more for internal purposes
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Open">
            <summary>
            Opens the individual stram components on the existing input context in order to start reading packets.
            Any Media Options must be set before this method is called.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Seek(System.TimeSpan)">
            <summary>
            Seeks to the specified position in the stream. This method attempts to do so as
            precisely as possible, returning decoded frames of all available media type components
            just before or right on the requested position. The position must be given in 0-based time,
            so it converts component stream start time offset to absolute, 0-based time.
            Pass TimeSpan.Zero to seek to the beginning of the stream.
            </summary>
            <param name="position">The position.</param>
            <returns>
            The list of media frames
            </returns>
            <exception cref="T:System.InvalidOperationException">No input context initialized</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Read">
            <summary>
            Reads the next available packet, sending the packet to the corresponding
            internal media component. It also sets IsAtEndOfStream property.
            Returns the media type if the packet was accepted by any of the media components.
            Returns None if the packet was not accepted by any of the media components
            or if reading failed (i.e. End of stream already or read error).
            Packets are queued internally. To dequeue them you need to call the receive frames
            method of each component until the packet buffer count becomes 0.
            </summary>
            <returns>The media type of the packet that was read</returns>
            <exception cref="T:System.InvalidOperationException">No input context initialized</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">When a read error occurs</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Decode">
            <summary>
            Decodes the next available packet in the packet queue for each of the components.
            Returns the list of decoded frames. You can call this method until the Components.PacketBufferCount
            becomes 0; The list of 0 or more decoded frames is returned in ascending StartTime order.
            A Packet may contain 0 or more frames. Once the frame source objects are returned, you
            are responsible for calling the Dispose method on them to free the underlying FFmpeg frame.
            Note that even after releasing them you can still use the managed properties.
            If you intend on Converting the frames to usable media frames (with Convert) you must not
            release the frame. Specify the release input argument as true and the frame will be automatically
            freed from memory.
            </summary>
            <returns>The list of media frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Convert(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Shared.MediaBlock},System.Boolean)">
            <summary>
            Performs audio, video and subtitle conversions on the decoded input frame so data
            can be used as a Frame. Please note that if the output is passed as a reference.
            This works as follows: if the output reference is null it will be automatically instantiated
            and returned by this function. This enables to  either instantiate or reuse a previously allocated Frame.
            This is important because buffer allocations are exepnsive operations and this allows you
            to perform the allocation once and continue reusing thae same buffer.
            </summary>
            <param name="input">The raw frame source. Has to be compatiable with the target. (e.g. use VideoFrameSource to conver to VideoFrame)</param>
            <param name="output">The target frame. Has to be compatible with the source.</param>
            <param name="siblings">The siblings that may help guess additional output parameters.</param>
            <param name="releaseInput">if set to <c>true</c> releases the raw frame source from unmanaged memory.</param>
            <returns>
            The media block
            </returns>
            <exception cref="T:System.InvalidOperationException">No input context initialized</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">MediaType</exception>
            <exception cref="T:System.ArgumentNullException">input</exception>
            <exception cref="T:System.ArgumentException">input
            or
            input</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.SignalAbortReads(System.Boolean)">
            <summary>
            Signals the packet reading operations to abort immediately.
            </summary>
            <param name="reset">if set to true, the read interrupt will reset the aborted state automatically</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.SignalResumeReads">
            <summary>
            Signals the state for read operations to stop being in the aborted state
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Close">
            <summary>
            Closes the input context immediately releasing all resources.
            This method is equivalent to calling the dispose method.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamInitialize">
            <summary>
            Initializes the input context to start read operations.
            This does NOT create the stream components and therefore, there needs to be a call
            to the Open method.
            </summary>
            <exception cref="T:System.InvalidOperationException">The input context has already been initialized.</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">When an error initializing the stream occurs.</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamInitializeInputContext">
            <summary>
            Initializes the InputContext and applies format options.
            https://www.ffmpeg.org/ffmpeg-formats.html#Format-Options
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamOpen">
            <summary>
            Opens the individual stream components to start reading packets.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamOpenCreateComponents">
            <summary>
            Creates the stream components by first finding the best available streams.
            Then it initializes the components of the correct type each.
            </summary>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">The exception ifnromation</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamRead">
            <summary>
            Reads the next packet in the underlying stream and enqueues in the corresponding media component.
            Returns None of no packet was read.
            </summary>
            <returns>The type of media packet that was read</returns>
            <exception cref="T:System.InvalidOperationException">Initialize</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">Raised when an error reading from the stream occurs.</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.OnStreamReadInterrupt(System.Void*)">
            <summary>
            The interrupt callback to handle stream reading timeouts
            </summary>
            <param name="opaque">A pointer to the format input context</param>
            <returns>0 for OK, 1 for error (timeout)</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeek(System.TimeSpan)">
            <summary>
            Seeks to the exact or prior frame of the main stream.
            Supports byte seeking. Target time is in absolute, zero-based time.
            </summary>
            <param name="targetTime">The target time in absolute, 0-based time.</param>
            <returns>
            The list of media frames
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeekToStart">
            <summary>
            Seeks to the position at the start of the stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeekDecode(System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaFrame},System.TimeSpan,Unosquare.FFME.Decoding.SeekRequirement)">
            <summary>
            Reads and decodes packets untill the required media components have frames on or right before the target time.
            </summary>
            <param name="result">The list of frames that is currently being processed. Frames will be added here.</param>
            <param name="targetTime">The target time in absolute 0-based time.</param>
            <param name="requirement">The requirement.</param>
            <returns>The number of decoded frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeekDiscardFrames(System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaFrame},System.TimeSpan)">
            <summary>
            Drops the seek frames that are no longer needed.
            Target time should be provided in absolute, 0-based time
            </summary>
            <param name="frames">The frames.</param>
            <param name="targetTime">The target time.</param>
            <returns>The number of dropped frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaFrame">
            <summary>
            Represents a wrapper for an unmanaged frame.
            Derived classes implement the specifics of each media type.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.#ctor(System.Void*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaFrame" /> class.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="component">The component.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>
            The type of the media.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StartTime">
            <summary>
            Gets the start time of the frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.EndTime">
            <summary>
            Gets the end time of the frame
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StreamIndex">
            <summary>
            Gets the index of the stream from which this frame was decoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.Duration">
            <summary>
            Gets the amount of time this data has to be presented
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.HasValidStartTime">
            <summary>
            Gets or sets a value indicating whether this frame obtained its start time
            form a valid frame pts value
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.IsStale">
            <summary>
            When the unmanaged frame is released (freed from unmanaged memory)
            this property will return true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StreamTimeBase">
            <summary>
            Gets the time base of the stream that generated this frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.CompareTo(Unosquare.FFME.Decoding.MediaFrame)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.PacketQueue">
            <summary>
            A data structure containing a quque of packets to process.
            This class is thread safe and disposable.
            Enqueued, unmanaged packets are disposed automatically by this queue.
            Dequeued packets are the responsibility of the calling code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.Count">
            <summary>
            Gets the packet count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.BufferLength">
            <summary>
            Gets the sum of all the packet sizes contained
            by this queue.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.Duration">
            <summary>
            Gets the total duration in stream TimeBase units.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:FFmpeg.AutoGen.AVPacket"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:FFmpeg.AutoGen.AVPacket"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The packet reference</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Peek">
            <summary>
            Peeks the next available packet in the queue without removing it.
            If no packets are available, null is returned.
            </summary>
            <returns>The packet</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Push(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Pushes the specified packet into the queue.
            In other words, enqueues the packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dequeue">
            <summary>
            Dequeues a packet from this queue.
            </summary>
            <returns>The dequeued packet</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Clear">
            <summary>
            Clears and frees all the unmanaged packets from this queue.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.SeekRequirement">
            <summary>
            Enumerates the seek target requirement levels.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.SeekRequirement.MainComponentOnly">
            <summary>
            Seek requirement is satisfied when
            the main component has frames in the seek range.
            This is the fastest option.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.SeekRequirement.AudioAndVideo">
            <summary>
            Seek requirement is satisfied when
            the both audio and video comps have frames in the seek range.
            This is the recommended option.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.SeekRequirement.AllComponents">
            <summary>
            Seek requirement is satisfied when
            ALL components have frames in the seek range
            This is NOT recommended as it forces large amounts of
            frames to get decoded in subtitle files.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.StreamSpecifier">
            <summary>
            A managed representation of an FFmpeg stream specifier
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.StreamSpecifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.StreamSpecifier"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.StreamSpecifier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.StreamSpecifier"/> class.
            </summary>
            <param name="streamId">The stream identifier.</param>
            <exception cref="T:System.ArgumentException">streamId</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.StreamSpecifier.#ctor(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.StreamSpecifier"/> class.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <exception cref="T:System.ArgumentException">streamType</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.StreamSpecifier.#ctor(Unosquare.FFME.Shared.MediaType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.StreamSpecifier"/> class.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <param name="streamId">The stream identifier.</param>
            <exception cref="T:System.ArgumentException">
            streamType
            or
            streamId
            </exception>
        </member>
        <member name="P:Unosquare.FFME.Decoding.StreamSpecifier.Types">
            <summary>
            Provides suffixes for the different media types.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.StreamSpecifier.StreamId">
            <summary>
            Gets the stream identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.StreamSpecifier.StreamSuffix">
            <summary>
            Gets the stream suffix.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.StreamSpecifier.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this stream specifier.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.SubtitleComponent">
            <summary>
            Performs subtitle stream extraction, decoding and text conversion.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.SubtitleComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Shared.MediaBlock})">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="siblings">The sibling blocks that may help guess some additional parameters for the input frame.</param>
            <returns>
            Return the updated output frame
            </returns>
            <exception cref="T:System.ArgumentNullException">input cannot be null</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.StripSrtFormat(System.String)">
            <summary>
            Strips the SRT format and returns plain text.
            </summary>
            <param name="input">The input.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.StripAssFormat(System.String)">
            <summary>
            Strips a line of text from the ASS format.
            </summary>
            <param name="input">The input.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.CreateFrameSource(FFmpeg.AutoGen.AVSubtitle*)">
            <summary>
            Creates a frame source object given the raw FFmpeg subtitle reference.
            </summary>
            <param name="frame">The raw FFmpeg subtitle pointer.</param>
            <returns>The managed frame</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.SubtitleFrame">
            <summary>
            Represents a wrapper for an unmanaged Subtitle frame.
            TODO: Only text (ASS and SRT) subtitles are supported currently.
            There is no support to bitmap subtitles.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.#ctor(FFmpeg.AutoGen.AVSubtitle*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.SubtitleFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.SubtitleFrame"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.Text">
            <summary>
            Gets lines of text that the subtitle frame contains.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.TextType">
            <summary>
            Gets the type of the text.
            </summary>
            <value>
            The type of the text.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged subtitle struct
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.AllocateSubtitle">
            <summary>
            Allocates an AVSubtitle struct in unmanaged memory,
            </summary>
            <returns>The subtitle struct pointer</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.DeallocateSubtitle(FFmpeg.AutoGen.AVSubtitle*)">
            <summary>
            Deallocates the subtitle struct used to create in managed memory.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.VideoComponent">
            <summary>
            Performs video picture decoding, scaling and extraction logic.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.VideoComponent.Scaler">
            <summary>
            Holds a reference to the video scaler
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.VideoComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.ScalerFlags">
            <summary>
            Gets the video scaler flags used to perfom colorspace conversion (if needed).
            Point / nearest-neighbor is the default and it is the cheapest. This is by design as
            we don't change the dimensions  of the image. We only do color conversion.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.BaseFrameRate">
            <summary>
            Gets the base frame rate as reported by the stream component.
            All discrete timestamps can be represented in this framerate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.CurrentFrameRate">
            <summary>
            Gets the current frame rate as guessed by the last processed frame.
            Variable framerate might report different values at different times.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.FrameWidth">
            <summary>
            Gets the width of the picture frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.FrameHeight">
            <summary>
            Gets the height of the picture frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Shared.MediaBlock})">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="siblings">The siblings to help guess additional frame parameters.</param>
            <returns>
            Return the updated output frame
            </returns>
            <exception cref="T:System.ArgumentNullException">input</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.CreateFrameSource(FFmpeg.AutoGen.AVFrame*@)">
            <summary>
            Creates a frame source object given the raw FFmpeg frame reference.
            </summary>
            <param name="frame">The raw FFmpeg frame pointer.</param>
            <returns>Create a managed fraome from an unmanaged one.</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.NormalizePixelFormat(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Gets the pixel format replacing deprecated pixel formats.
            AV_PIX_FMT_YUVJ
            </summary>
            <param name="frame">The frame.</param>
            <returns>A normalized pixel format</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.ComputeFilterArguments(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Computes the frame filter arguments that are appropriate for the video filtering chain.
            </summary>
            <param name="frame">The frame.</param>
            <returns>The base filter arguments</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.InitializeFilterGraph(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            If necessary, disposes the existing filtergraph and creates a new one based on the frame arguments.
            </summary>
            <param name="frame">The frame.</param>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">
            avfilter_graph_create_filter
            or
            avfilter_graph_create_filter
            or
            avfilter_link
            or
            avfilter_graph_parse
            or
            avfilter_graph_config
            </exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.DestroyFiltergraph">
            <summary>
            Destroys the filtergraph releasing unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.VideoFrame">
            <summary>
            Represents a wrapper for an unmanaged ffmpeg video frame.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.#ctor(FFmpeg.AutoGen.AVFrame*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.VideoFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.VideoFrame"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.ClosedCaptions">
            <summary>
            Gets the closed caption data collected from the frame in CEA-708/EAS-608 format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.DisplayPictureNumber">
            <summary>
            Gets the display picture number (frame number).
            If not set by the decoder, this attempts to obtain it by dividing the start time by the
            frame duration
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.CodedPictureNumber">
            <summary>
            Gets the coded picture number set by the decoder.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.SmtpeTimecode">
            <summary>
            Gets the SMTPE time code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.MediaEngine">
            <summary>
            Represents a Media Engine that contains underlying streams of audio and/or video.
            It uses the fantastic FFmpeg library to perform reading and decoding of media streams.
            </summary>
            <seealso cref="T:Unosquare.FFME.Shared.IMediaLogger" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMessageLogged(Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Raises the MessageLogged event
            </summary>
            <param name="message">The <see cref="T:Unosquare.FFME.Shared.MediaLogMessage" /> instance containing the message.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaFailed(System.Exception)">
            <summary>
            Raises the media failed event.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaClosed">
            <summary>
            Raises the media closed event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaOpened">
            <summary>
            Raises the media opened event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaInitializing(Unosquare.FFME.Shared.StreamOptions,System.String)">
            <summary>
            Raises the media initializing event.
            </summary>
            <param name="options">The options.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaOpening">
            <summary>
            Raises the media opening event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnBufferingStarted">
            <summary>
            Raises the buffering started event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnBufferingEnded">
            <summary>
            Raises the buffering ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnSeekingStarted">
            <summary>
            Raises the Seeking started event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnSeekingEnded">
            <summary>
            Raises the Seeking ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaEnded">
            <summary>
            Raises the media ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnPositionChanged(System.TimeSpan,System.TimeSpan)">
            <summary>
            Sends the on position changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaStateChanged(Unosquare.FFME.Shared.PlaybackStatus,Unosquare.FFME.Shared.PlaybackStatus)">
            <summary>
            Sends the on media state changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.SynchronousCommandDone">
            <summary>
            The open or close command done signalling object.
            Open and close are synchronous commands.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Commands">
            <summary>
            The command queue to be executed in the order they were sent.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Clock">
            <summary>
            Represents a real-time time measuring device.
            Rendering media should occur as requested by the clock.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Container">
            <summary>
            The underlying media container that provides access to
            individual media component streams
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Open(System.Uri)">
            <summary>
            Opens the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>The awaitable task</returns>
            <exception cref="T:System.InvalidOperationException">Source</exception>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Close">
            <summary>
            Closes the currently loaded media.
            </summary>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Play">
            <summary>
            Begins or resumes playback of the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Pause">
            <summary>
            Pauses playback of the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Stop">
            <summary>
            Pauses and rewinds the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.RequestSeek(System.TimeSpan)">
            <summary>
            Seeks to the specified position.
            </summary>
            <param name="position">New position for the player.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.RequestSpeedRatio(System.Double)">
            <summary>
            Sets the specified playback speed ratio.
            </summary>
            <param name="targetSpeedRatio">New playback speed ratio.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.BeginSynchronousCommand">
            <summary>
            Begins a synchronous command by locking the internal wait handle.
            </summary>
            <returns>True if successful, false if unsuccessful</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.EndSynchronousCommand">
            <summary>
            Ends a synchronous command by releasing the internal wait handle.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.m_IsDisposed">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.#ctor(System.Object,Unosquare.FFME.Shared.IMediaConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaEngine" /> class.
            </summary>
            <param name="parent">The associated parent object.</param>
            <param name="connector">The parent implementing connector methods.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the static Initialize method has not been called.</exception>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.State">
            <summary>
            Contains the Media Status
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.WallClock">
            <summary>
            Gets the internal real time clock position.
            This is different from the position property and it is useful
            in computing things like real-time latency in a render cycle.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.MediaInfo">
            <summary>
            Provides stream, chapter and program info of the underlying media.
            Returns null when no media is loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Parent">
            <summary>
            Gets the associated parent object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Connector">
            <summary>
            Gets the event connector (platform specific).
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Log(Unosquare.FFME.Shared.MediaLogMessageType,System.String)">
            <summary>
            Logs the specified message into the logger queue.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.DisposePreloadedSubtitles">
            <summary>
            Disposes the preloaded subtitles.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            Please not that this call is non-blocking/asynchronous.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.InitLock">
            <summary>
            The initialize lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.IsIntialized">
            <summary>
            The has intialized flag
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.m_FFmpegDirectory">
            <summary>
            The ffmpeg directory
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.m_FFmpegLoadModeFlags">
            <summary>
            Stores the load mode flags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Platform">
            <summary>
            Gets the platform-specific implementation requirements.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.FFmpegDirectory">
            <summary>
            Gets or sets the FFmpeg path from which to load the FFmpeg binaries.
            You must set this path before setting the Source property for the first time on any instance of this control.
            Settng this property when FFmpeg binaries have been registered will have no effect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.FFmpegLoadModeFlags">
            <summary>
            Gets or sets the bitwise library identifiers to load.
            If FFmpeg is already loaded, the value cannot be changed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Initialize(Unosquare.FFME.Shared.IPlatform)">
            <summary>
            Initializes the MedieElementCore.
            </summary>
            <param name="platform">The platform-specific implementation.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.LoadBlocks(System.String,Unosquare.FFME.Shared.MediaType,Unosquare.FFME.Shared.IMediaLogger)">
            <summary>
            Reads all the blocks of the specified media type from the source url.
            </summary>
            <param name="sourceUrl">The subtitles URL.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="parent">The parent.</param>
            <returns>A buffer containing all the blocks</returns>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.m_PacketReadingCycle">
            <summary>
            This partial class implements:
            1. Packet reading from the Container
            2. Frame Decoding from packet buffer and Block buffering
            3. Block Rendering from block buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Blocks">
            <summary>
            Holds the materialized block cache for each media type.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.PreloadedSubtitles">
            <summary>
            Gets the preloaded subtitle blocks.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.PacketReadingCycle">
            <summary>
            Gets the packet reading cycle control evenet.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.FrameDecodingCycle">
            <summary>
            Gets the frame decoding cycle control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.BlockRenderingCycle">
            <summary>
            Gets the block rendering cycle control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.SeekingDone">
            <summary>
            Gets the seeking done control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.IsTaskCancellationPending">
            <summary>
            Gets or sets a value indicating whether the workedrs have been requested
            an exit.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.HasDecoderSeeked">
            <summary>
            Gets or sets a value indicating whether the decoder has moved its byte position
            to something other than the normal continuous reads in the last read cycle.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Renderers">
            <summary>
            Holds the block renderers
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.LastRenderTime">
            <summary>
            Holds the last rendered StartTime for each of the media block types
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.CanReadMorePackets">
            <summary>
            Gets a value indicating whether more packets can be read from the stream.
            This does not check if the packet queue is full.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.ShouldReadMorePackets">
            <summary>
            Gets a value indicating whether room is available in the download cache.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.CanReadMoreFrames">
            <summary>
            Gets a value indicating whether more frames can be decoded from the packet queue.
            That is, if we have packets in the packet buffer or if we are not at the end of the stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StartWorkers">
            <summary>
            Initializes the media block buffers and
            starts packet reader, frame decoder, and block rendering workers.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StopWorkers">
            <summary>
            Stops the packet reader, frame decoder, and block renderers
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.PreloadSubtitles">
            <summary>
            Preloads the subtitles from the MediaOptions.SubtitlesUrl.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SnapToFramePosition(System.TimeSpan)">
            <summary>
            Returns the value of a discrete video position if possible
            </summary>
            <param name="position">The position.</param>
            <returns>The snapped position</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.CanReadMoreFramesOf(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Gets a value indicating whether more frames can be converted into blocks of the given type.
            </summary>
            <param name="t">The t.</param>
            <returns>
              <c>true</c> if this instance [can read more frames of] the specified t; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendBlockToRenderer(Unosquare.FFME.Shared.MediaBlock,System.TimeSpan)">
            <summary>
            Sends the given block to its corresponding media renderer.
            </summary>
            <param name="block">The block.</param>
            <param name="clockPosition">The clock position.</param>
            <returns>The number of blocks sent to the renderer</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.AddBlocks(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Adds the blocks of the given media type.
            </summary>
            <param name="t">The t.</param>
            <returns>The number of blocks that were added</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.RunFrameDecodingWorker">
            <summary>
            Continually decodes the available packet buffer to have as
            many frames as possible in each frame queue and
            up to the MaxFrames on each component
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.RunPacketReadingWorker">
            <summary>
            Runs the read task which keeps a packet buffer as full as possible.
            It reports on DownloadProgress by enqueueing an update to the property
            in order to avoid any kind of disruption to this thread caused by the UI thread.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StartBlockRenderingWorker">
            <summary>
            Starts the block rendering worker.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StopBlockRenderingWorker">
            <summary>
            Stops the block rendering worker.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Playlists.AttributeSet">
            <summary>
            Represents a dictionary of attributes (key-value pairs)
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Playlists.AttributeSet"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.GetEntryValue(System.String)">
            <summary>
            Gets the entry value safely.
            </summary>
            <param name="entryKey">The entry key.</param>
            <returns>The entry value or null</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.SetEntryValue(System.String,System.String)">
            <summary>
            Sets the entry value and returns true if the value changes
            </summary>
            <param name="entryKey">The entry key.</param>
            <param name="value">The value.</param>
            <returns>True if the property changed, false otherwise.</returns>
        </member>
        <member name="T:Unosquare.FFME.Playlists.Playlist`1">
            <summary>
            Represents an observable collection of playlist entries.
            General guidelines taken from http://xmtvplayer.com/build-m3u-file
            </summary>
            <typeparam name="T">The type of playlist items</typeparam>
            <seealso cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
            <seealso cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Playlists.Playlist`1"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Playlists.Playlist`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Unosquare.FFME.Playlists.Playlist`1.Name">
            <summary>
            Gets or sets the name of this playlist.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.Playlist`1.Attributes">
            <summary>
            Gets the extended attributes key-value pairs.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Open(System.String)">
            <summary>
            Loads the playlist from the specified path, assuming UTF8 encoding
            </summary>
            <param name="filePath">The text.</param>
            <returns>The loaded playlist</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Open(System.IO.Stream)">
            <summary>
            Loads the playlist from the specified stream as UTF8.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The loaded playlist</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Open(System.String,System.Text.Encoding)">
            <summary>
            Loads the playlist from the specified file path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            The loaded playlist
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Open(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the playlist from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <returns>The loaded playlist.</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Load(System.String)">
            <summary>
            Loads from the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads from the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the playlist data into this playlist
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the playlist to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Save(System.IO.Stream)">
            <summary>
            Saves the playlist to the specified stream with UTF8 encoding.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Save(System.String)">
            <summary>
            Saves the playlist to the specified path in UTF8 encoding.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.NotifyAttributeChangedFor(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Add(System.String,System.TimeSpan,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds an entry to the playlist.
            </summary>
            <param name="title">The title.</param>
            <param name="duration">The duration.</param>
            <param name="url">The URL.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:Unosquare.FFME.Playlists.Playlist">
            <summary>
            A standard Playlist class with regular PlaylistEntry items
            </summary>
            <seealso cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
        </member>
        <member name="T:Unosquare.FFME.Playlists.PlaylistEntry">
            <summary>
            Represents a generic playlist entry
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Playlists.PlaylistEntry"/> class.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.Playlists.PlaylistEntry.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.PlaylistEntry.MediaUrl">
            <summary>
            Gets or sets the media URL.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.PlaylistEntry.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.PlaylistEntry.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.PlaylistEntry.Attributes">
            <summary>
            Gets the extended attributes.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistEntry.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistEntry.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="T:Unosquare.FFME.Playlists.PlaylistExtensions">
            <summary>
            Heklper methods for parsing m3u8 playlists
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistExtensions.ParseHeaderLine``1(Unosquare.FFME.Playlists.Playlist{``0},System.String)">
            <summary>
            Parses the header line.
            </summary>
            <typeparam name="T">The type of playlist items</typeparam>
            <param name="target">The target.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistExtensions.BeginExtendedInfoLine(Unosquare.FFME.Playlists.PlaylistEntry,System.String)">
            <summary>
            Parses the extended information line into a Playlist entry.
            </summary>
            <param name="target">The target.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistExtensions.ParseAttributes(System.String)">
            <summary>
            Parses the attributes.
            </summary>
            <param name="headerData">The header data.</param>
            <returns>a list of attributes</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistExtensions.ParseNextAttribute(System.String,Unosquare.FFME.Playlists.PlaylistExtensions.ParsedAttribute)">
            <summary>
            Parses the next attribute.
            </summary>
            <param name="headerData">The header data.</param>
            <param name="lastAttribute">The last attribute.</param>
            <returns>THe parsed attribute</returns>
        </member>
        <member name="T:Unosquare.FFME.Playlists.PlaylistExtensions.ParsedAttribute">
            <summary>
            A POCO class to hold parsed attributes
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicBoolean">
            <summary>
            Fast, atomioc boolean combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicBoolean"/> class.
            </summary>
            <param name="initialValue">if set to <c>true</c> [initial value].</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicBoolean"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicBoolean.FromLong(System.Int64)">
            <summary>
            COnverts froma long value to the target type.
            </summary>
            <param name="backingValue">The backing value.</param>
            <returns>
            The value converted form a long value
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicBoolean.ToLong(System.Boolean)">
            <summary>
            Converts from the target type to a long value
            </summary>
            <param name="value">The value.</param>
            <returns>
            The value converted to a long value
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicDouble">
            <summary>
            Fast, atomioc double combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDouble.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicDouble"/> class.
            </summary>
            <param name="initialValue">if set to <c>true</c> [initial value].</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDouble.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicDouble"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDouble.FromLong(System.Int64)">
            <summary>
            COnverts froma long value to the target type.
            </summary>
            <param name="backingValue">The backing value.</param>
            <returns>
            The value converted form a long value
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDouble.ToLong(System.Double)">
            <summary>
            Converts from the target type to a long value
            </summary>
            <param name="value">The value.</param>
            <returns>
            The value converted to a long value
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicInteger">
            <summary>
            Represents an atomically readabl;e or writable integer.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicInteger"/> class.
            </summary>
            <param name="initialValue">if set to <c>true</c> [initial value].</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicInteger"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicInteger.FromLong(System.Int64)">
            <summary>
            COnverts froma long value to the target type.
            </summary>
            <param name="backingValue">The backing value.</param>
            <returns>
            The value converted form a long value
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicInteger.ToLong(System.Int32)">
            <summary>
            Converts from the target type to a long value
            </summary>
            <param name="value">The value.</param>
            <returns>
            The value converted to a long value
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicLong">
            <summary>
            Fast, atomioc long combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicLong.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicLong"/> class.
            </summary>
            <param name="initialValue">if set to <c>true</c> [initial value].</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicLong.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicLong"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicLong.FromLong(System.Int64)">
            <summary>
            COnverts froma long value to the target type.
            </summary>
            <param name="backingValue">The backing value.</param>
            <returns>
            The value converted form a long value
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicLong.ToLong(System.Int64)">
            <summary>
            Converts from the target type to a long value
            </summary>
            <param name="value">The value.</param>
            <returns>
            The value converted to a long value
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicTypeBase`1">
            <summary>
            Provides a generic implementation of an Atomic (interlocked) type
            </summary>
            <typeparam name="T">The structure type backed by a 64-bit value</typeparam>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicTypeBase`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.AtomicTypeBase`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.AtomicTypeBase`1.BackingValue">
            <summary>
            Gets or sets the backing value.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Equality(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Inequality(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_GreaterThan(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_LessThan(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_GreaterThanOrEqual(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_LessThanOrEqual(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Increment(Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator ++.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Decrement(Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator --.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Addition(Unosquare.FFME.Primitives.AtomicTypeBase{`0},System.Int64)">
            <summary>
            Implements the operator -&lt;.
            </summary>
            <param name="instance">The instance.</param>
            <param name="operand">The operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Subtraction(Unosquare.FFME.Primitives.AtomicTypeBase{`0},System.Int64)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="instance">The instance.</param>
            <param name="operand">The operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.CompareTo(System.Object)">
            <summary>
            Compares the value to the other instance
            </summary>
            <param name="other">The other instance.</param>
            <returns>0 if equal, 1 if this instance is greater, -1 if this instance is less than</returns>
            <exception cref="T:System.ArgumentException">When types are incompatible</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.CompareTo(`0)">
            <summary>
            Compares the value to the other instance
            </summary>
            <param name="other">The other instance.</param>
            <returns>0 if equal, 1 if this instance is greater, -1 if this instance is less than</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.CompareTo(Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Compares the value to the other instance
            </summary>
            <param name="other">The other instance.</param>
            <returns>0 if equal, 1 if this instance is greater, -1 if this instance is less than</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.Equals(Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.Equals(`0)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.FromLong(System.Int64)">
            <summary>
            Converts froma long value to the target type.
            </summary>
            <param name="backingValue">The backing value.</param>
            <returns>The value converted form a long value</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.ToLong(`0)">
            <summary>
            Converts from the target type to a long value
            </summary>
            <param name="value">The value.</param>
            <returns>The value converted to a long value</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.Benchmark">
            <summary>
            A simple benchmarking class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.Start(System.String)">
            <summary>
            Starts measuring with the given identifier.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>A disposable object that when disposed, adds a benchmark result.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.Dump">
            <summary>
            Outputs the benchmark statistics.
            </summary>
            <returns>A string containing human-readable statistics</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.Add(System.String,System.TimeSpan)">
            <summary>
            Adds the specified result to the given identifier.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="elapsed">The elapsed.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit">
            <summary>
            Represents a disposable benchmark unit.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit" /> class.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.CircularBuffer">
            <summary>
            A fixed-size buffer that acts as an infinite length one.
            This buffer is backed by unmanaged, very fast memory so ensure you call
            the dispose method when you are donde using it.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Primitives.CircularBuffer.Locker">
            <summary>
            The locking object to perform synchronization.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.CircularBuffer.IsDisposed">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.CircularBuffer.Buffer">
            <summary>
            The unmanaged buffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.CircularBuffer"/> class.
            </summary>
            <param name="bufferLength">Length of the buffer.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Primitives.CircularBuffer"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.Length">
            <summary>
            Gets the capacity of this buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.ReadIndex">
            <summary>
            Gets the current, 0-based read index
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.RewindableCount">
            <summary>
            Gets the maximum rewindable amount of bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.WriteIndex">
            <summary>
            Gets the current, 0-based write index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.WriteTag">
            <summary>
            Gets an the object associated with the last write
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.ReadableCount">
            <summary>
            Gets the available bytes to read.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.WritableCount">
            <summary>
            Gets the number of bytes that can be written.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.CapacityPercent">
            <summary>
            Gets percentage of used bytes (readbale/available, from 0.0 to 1.0).
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Skip(System.Int32)">
            <summary>
            Skips the specified amount requested bytes to be read.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <exception cref="T:System.InvalidOperationException">When requested bytes GT readable count</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Rewind(System.Int32)">
            <summary>
            Rewinds the read position by specified requested amount of bytes.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <exception cref="T:System.InvalidOperationException">When requested GT rewindable</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Read(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads the specified number of bytes into the target array.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <param name="target">The target.</param>
            <param name="targetOffset">The target offset.</param>
            <exception cref="T:System.InvalidOperationException">When requested bytes is greater than readble count</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Write(System.IntPtr,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Writes data to the backing buffer using the specified pointer and length.
            and associating a write tag for this operation.
            </summary>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
            <param name="writeTag">The write tag.</param>
            <param name="overwrite">if set to <c>true</c>, overwrites the data even if it has not been read.</param>
            <exception cref="T:System.InvalidOperationException">When read needs to be called more often!</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Clear">
            <summary>
            Resets all states as if this buffer had just been created.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.DelayProvider">
            <summary>
            Represents logic providing several delay mechanisms
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.#ctor(Unosquare.FFME.Primitives.DelayProvider.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.DelayProvider"/> class.
            </summary>
            <param name="strategy">The strategy.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.DelayProvider"/> class.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy">
            <summary>
            Enumerates the different ways of providing delays
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy.ThreadSleep">
            <summary>
            Using the Thread.Sleep(1) mechanism
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy.TaskDelay">
            <summary>
            Using the Task.Delay(1).Wait mechanism
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy.ThreadPool">
            <summary>
            Using a wait event that completes in a background threadpool thread.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.DelayProvider.Strategy">
            <summary>
            Gets the selected delay strategy.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.WaitOne">
            <summary>
            Creates the smallest possible, synchronous delay based on the selected strategy
            </summary>
            <returns>The elamped time of the delay</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.ISyncLocker">
            <summary>
            Defines a generic interface for synchronized locking mechanisms
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.ISyncLocker.AcquireWriterLock">
            <summary>
            Acquires a writer lock.
            The lock is released when the returned locking object is disposed.
            </summary>
            <returns>A disposable locking object.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.ISyncLocker.AcquireReaderLock">
            <summary>
            Acquires a reader lock.
            The lock is released when the returned locking object is disposed.
            </summary>
            <returns>A disposable locking object.</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.IWaitEvent">
            <summary>
            Provides a generalized API for ManualResetEvent and ManualResetEventSlim
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Unosquare.FFME.Primitives.IWaitEvent.IsCompleted">
            <summary>
            Gets a value indicating whether the event is in the completed state.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.IWaitEvent.IsInProgress">
            <summary>
            Gets a value indicating whether the Begin method has been called.
            It returns false after the Complete method is called
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.IWaitEvent.IsValid">
            <summary>
            Returns true if the underlying handle is not closed and it is still valid.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.IWaitEvent.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.IWaitEvent.Begin">
            <summary>
            Enters the state in which waiters need to wait.
            All future waiters will block when they call the Wait method
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.IWaitEvent.Complete">
            <summary>
            Leaves the state in which waiters need to wait.
            All current waiters will continue.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.IWaitEvent.Wait">
            <summary>
            Waits for the event to be completed
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.IWaitEvent.Wait(System.TimeSpan)">
            <summary>
            Waits for the event to be completed.
            Returns True when there was no timeout. False if the tiemout was reached
            </summary>
            <param name="timeout">The maximum amount of time to wait for.</param>
            <returns>True when there was no timeout. False if the tiemout was reached</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.MediaBlockBuffer">
            <summary>
            Represents a set of preallocated media blocks of the same media type.
            A block buffer contains playback and pool blocks. Pool blocks are blocks that
            can be reused. Playback blocks are blocks that have been filled.
            This class is thread safe.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.MediaBlockBuffer.PoolBlocks">
            <summary>
            The blocks that are available to be filled.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.MediaBlockBuffer.PlaybackBlocks">
            <summary>
            The blocks that are available for rendering.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.MediaBlockBuffer.Locker">
            <summary>
            Controls multiple reads and exclusive writes
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.#ctor(System.Int32,Unosquare.FFME.Shared.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.MediaBlockBuffer"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.MediaType">
            <summary>
            Gets the media type of the block buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.RangeStartTime">
            <summary>
            Gets the start time of the first block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.RangeEndTime">
            <summary>
            Gets the end time of the last block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.RangeDuration">
            <summary>
            Gets the range of time between the first block and the end time of the last block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.AverageBlockDuration">
            <summary>
            Gets the average duration of the currently available playback blocks.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.IsMonotonic">
            <summary>
            Gets a value indicating whether all the durations of the blocks are equal
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.Count">
            <summary>
            Gets the number of available playback blocks.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.Capacity">
            <summary>
            Gets the maximum count of this buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.CapacityPercent">
            <summary>
            Gets the usage percent from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.IsFull">
            <summary>
            Gets a value indicating whether the playback blocks are all allocated.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.LifetimeBlockDuration">
            <summary>
            Holds the duration of all the blocks that have been added in the lifetime of this object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Unosquare.FFME.Shared.MediaBlock" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Unosquare.FFME.Shared.MediaBlock"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The media block</returns>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.Item(System.TimeSpan)">
            <summary>
            Gets the <see cref="T:Unosquare.FFME.Shared.MediaBlock" /> at the specified timestamp.
            </summary>
            <value>
            The <see cref="T:Unosquare.FFME.Shared.MediaBlock"/>.
            </value>
            <param name="at">At time.</param>
            <returns>The media block</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.GetRangePercent(System.TimeSpan)">
            <summary>
            Gets the percentage of the range for the given time position.
            </summary>
            <param name="position">The position.</param>
            <returns>The percent of the range</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Next(Unosquare.FFME.Shared.MediaBlock)">
            <summary>
            Retrieves the block following the provided current block
            </summary>
            <param name="current">The current block.</param>
            <returns>The next media block</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.IsInRange(System.TimeSpan)">
            <summary>
            Determines whether the given render time is within the range of playback blocks.
            </summary>
            <param name="renderTime">The render time.</param>
            <returns>
              <c>true</c> if [is in range] [the specified render time]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.IndexOf(System.TimeSpan)">
            <summary>
            Retrieves the index of the playback block corresponding to the specified
            render time. This uses very fast binary and linear search commbinations.
            If there are no playback blocks it returns -1.
            If the render time is greater than the range end time, it returns the last playback block index.
            If the render time is less than the range start time, it returns the first playback block index.
            </summary>
            <param name="renderTime">The render time.</param>
            <returns>The media block's index</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Add(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Decoding.MediaContainer)">
            <summary>
            Adds a block to the playback blocks by converting the given frame.
            If there are no more blocks in the pool, the oldest block is returned to the pool
            and reused for the new block. The source frame is automatically disposed.
            </summary>
            <param name="source">The source.</param>
            <param name="container">The container.</param>
            <returns>The filled block.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Clear">
            <summary>
            Clears all the playback blocks returning them to the
            block pool.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Debug">
            <summary>
            Returns a formatted string with information about this buffer
            </summary>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.CreateBlock(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Block factory method.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <exception cref="T:System.InvalidCastException">MediaBlock does not have a valid type</exception>
            <returns>An instance of the block of the specified type</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.MediaTypeDictionary`1">
            <summary>
            Represents a very simple dictionary for MediaType keys
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaTypeDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.MediaTypeDictionary`1"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaTypeDictionary`1.Item(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Gets or sets the item with the specified key.
            return the default value of the value type when the key does not exist.
            </summary>
            <param name="key">The key.</param>
            <returns>The item</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory">
            <summary>
            Provides factory methods to create synchronized reader-writer locks
            that support a generalized locking and releasing api and syntax.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.LockHolderType">
            <summary>
            Enumerates the locking operations
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable">
            <summary>
            Defines methods for releasing locks
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.Create">
            <summary>
            Creates a reader-writer lock backed by a standard ReaderWriterLock
            </summary>
            <returns>The synchronized locker</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.CreateSlim">
            <summary>
            Creates a reader-writer lock backed by a ReaderWriterLockSlim
            </summary>
            <returns>The synchronized locker</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.Create(System.Boolean)">
            <summary>
            Creates a reader-writer lock.
            </summary>
            <param name="useSlim">if set to <c>true</c> it uses the Slim version of a reader-writer lock.</param>
            <returns>The Sync Locker</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser">
            <summary>
            The lock releaser. Calling the dispose method releases the lock entered by the parent SyncLocker.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser.#ctor(Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable,Unosquare.FFME.Primitives.SyncLockerFactory.LockHolderType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker">
            <summary>
            The Sync Locker backed by a ReaderWriterLock
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.ISyncLocker" />
            <seealso cref="T:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.AcquireReaderLock">
            <summary>
            Acquires a reader lock.
            The lock is released when the returned locking object is disposed.
            </summary>
            <returns>
            A disposable locking object.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.AcquireWriterLock">
            <summary>
            Acquires a writer lock.
            The lock is released when the returned locking object is disposed.
            </summary>
            <returns>
            A disposable locking object.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim">
            <summary>
            The Sync Locker backed by ReaderWriterLockSlim
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.ISyncLocker" />
            <seealso cref="T:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.AcquireReaderLock">
            <summary>
            Acquires a reader lock.
            The lock is released when the returned locking object is disposed.
            </summary>
            <returns>
            A disposable locking object.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.AcquireWriterLock">
            <summary>
            Acquires a writer lock.
            The lock is released when the returned locking object is disposed.
            </summary>
            <returns>
            A disposable locking object.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.WaitEventFactory">
            <summary>
            Provides a Manual Reset Event factory with a unified API
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.Create(System.Boolean)">
            <summary>
            Creates a Wait Event backed by a standard ManualResetEvent
            </summary>
            <param name="isCompleted">if initially set to completed. Generally true</param>
            <returns>The Wait Event</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.CreateSlim(System.Boolean)">
            <summary>
            Creates a Wait Event backed by a ManualResetEventSlim
            </summary>
            <param name="isCompleted">if initially set to completed. Generally true</param>
            <returns>The Wait Event</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.Create(System.Boolean,System.Boolean)">
            <summary>
            Creates a Wait Event backed by a ManualResetEventSlim
            </summary>
            <param name="isCompleted">if initially set to completed. Generally true</param>
            <param name="useSlim">if set to <c>true</c> creates a slim version of the wait event.</param>
            <returns>The Wait Event</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent">
            <summary>
            Defines a WaitEvent backed by a ManualResetEvent
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.IWaitEvent" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent"/> class.
            </summary>
            <param name="isCompleted">if set to <c>true</c> [is completed].</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.IsValid">
            <summary>
            Returns true if the underlying handle is not closed and it is still valid.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is done.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.IsInProgress">
            <summary>
            Gets a value indicating whether the Begin method has been called.
            It returns false after the Complete method is called
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Begin">
            <summary>
            Enters the state in which waiters need to wait.
            All future waiters will block when they call the Wait method
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Complete">
            <summary>
            Leaves the state in which waiters need to wait.
            All current waiters will continue.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Wait">
            <summary>
            Waits for the event to be completed
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Wait(System.TimeSpan)">
            <summary>
            Waits for the event to be completed.
            Returns True when there was no timeout. False if the tiemout was reached
            </summary>
            <param name="timeout">The maximum amount of time to wait for.</param>
            <returns>
            True when there was no timeout. False if the tiemout was reached
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim">
            <summary>
            Defines a WaitEvent backed by a ManualResetEventSlim
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.IWaitEvent" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim"/> class.
            </summary>
            <param name="isCompleted">if set to <c>true</c> [is completed].</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.IsValid">
            <summary>
            Returns true if the underlying handle is not closed and it is still valid.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.IsCompleted">
            <summary>
            Gets a value indicating whether this instance is done.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.IsInProgress">
            <summary>
            Gets a value indicating whether the Begin method has been called.
            It returns false after the Complete method is called
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Begin">
            <summary>
            Enters the state in which waiters need to wait.
            All future waiters will block when they call the Wait method
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Complete">
            <summary>
            Leaves the state in which waiters need to wait.
            All current waiters will continue.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Wait">
            <summary>
            Waits for the event to be completed
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Wait(System.TimeSpan)">
            <summary>
            Waits for the event to be completed.
            Returns True when there was no timeout. False if the tiemout was reached
            </summary>
            <param name="timeout">The maximum amount of time to wait for.</param>
            <returns>
            True when there was no timeout. False if the tiemout was reached
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.AudioBlock">
            <summary>
            A scaled, preallocated audio frame container.
            The buffer is in 16-bit signed, interleaved sample data
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.AudioBlock.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Shared.AudioBlock"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.Buffer">
            <summary>
            Gets a pointer to the first byte of the data buffer.
            The format signed 16-bits per sample, channel interleaved
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.BufferLength">
            <summary>
            Gets the length of the buffer in bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.SampleRate">
            <summary>
            Gets the sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.SamplesPerChannel">
            <summary>
            Gets the available samples per channel.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.AudioBufferLength">
            <summary>
            The picture buffer length of the last allocated buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.AudioBuffer">
            <summary>
            Holds a reference to the last allocated buffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.AudioBlock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.AudioBlock.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants">
            <summary>
            Defaults and constants of the Media Engine
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.FFmpegSearchPath">
            <summary>
            Gets the assembly location.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants.Controller">
            <summary>
            Defines Controller Value Defaults
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.DefaultSpeedRatio">
            <summary>
            The default speed ratio
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.DefaultBalance">
            <summary>
            The default balance
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.DefaultVolume">
            <summary>
            The default volume
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.MinSpeedRatio">
            <summary>
            The minimum speed ratio
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.MaxSpeedRatio">
            <summary>
            The maximum speed ratio
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.MinBalance">
            <summary>
            The minimum balance
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.MaxBalance">
            <summary>
            The maximum balance
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.MaxVolume">
            <summary>
            The maximum volume
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Controller.MinVolume">
            <summary>
            The minimum volume
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants.Audio">
            <summary>
            Defines decoder output constants for audio streams
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Audio.BufferPadding">
            <summary>
            The audio buffer padding
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Audio.BitsPerSample">
            <summary>
            The audio bits per sample (1 channel only)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Audio.BytesPerSample">
            <summary>
            The audio bytes per sample
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Audio.SampleFormat">
            <summary>
            The audio sample format
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Audio.ChannelCount">
            <summary>
            The audio channel count
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Audio.SampleRate">
            <summary>
            The audio sample rate (per channel)
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants.Video">
            <summary>
            Defines decoder output constants for audio streams
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Video.BitsPerComponent">
            <summary>
            The video bits per component
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Video.BitsPerPixel">
            <summary>
            The video bits per pixel
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Video.BytesPerPixel">
            <summary>
            The video bytes per pixel
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.Constants.Video.VideoPixelFormat">
            <summary>
            The video pixel format. BGRX, 32bit
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants.Interval">
            <summary>
            Defines timespans of different priority intervals
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Interval.HighPriority">
            <summary>
            The timer high priority interval for stuff like rendering
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Interval.MediumPriority">
            <summary>
            The timer medium priority interval for stuff like property updates
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Interval.LowPriority">
            <summary>
            The timer low priority interval for stuff like logging
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Extensions">
            <summary>
            Provides various helpers and extension methods.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.PutAudioSample(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Puts a short value in the target buffer as bytes
            </summary>
            <param name="buffer">The target.</param>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetAudioSample(System.Byte[],System.Int32)">
            <summary>
            Gets the a signed 16 bit integer at the guven offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The signed integer.</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetAudioSampleAmplitude(System.Byte[],System.Int32)">
            <summary>
            Gets the audio sample amplitude (absolute value of the sample).
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The sample amplitude</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetAudioSampleLevel(System.Byte[],System.Int32)">
            <summary>
            Gets the audio sample level for 0 to 1.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The amplitude level</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Format(System.TimeSpan)">
            <summary>
            Returns a formatted timestamp string in Seconds
            </summary>
            <param name="ts">The ts.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.FormatElapsed(System.DateTime)">
            <summary>
            Returns a formatted string with elapsed milliseconds between now and
            the specified date.
            </summary>
            <param name="dt">The dt.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Format(System.Int64,System.Double)">
            <summary>
            Returns a fromatted string, dividing by the specified
            factor. Useful for debugging longs with byte positions or sizes.
            </summary>
            <param name="ts">The ts.</param>
            <param name="divideBy">The divide by.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToMultipleOf(System.Double,System.Double)">
            <summary>
            Converts the given value to a value that is of the given multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Double,FFmpeg.AutoGen.AVRational)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToLong(System.TimeSpan,FFmpeg.AutoGen.AVRational)">
            <summary>
            Converts a timespan to an AV_TIME_BASE compatible timestamp
            </summary>
            <param name="ts">The ts.</param>
            <param name="timeBase">The time base.</param>
            <returns>
            A long, ffmpeg compatible timestamp
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Int64,FFmpeg.AutoGen.AVRational)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Double,System.Double)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS in seconds.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Int64,System.Double)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Double)">
            <summary>
            Gets a timespan given a timestamp (in AV_TIME_BASE units)
            </summary>
            <param name="pts">The PTS.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Int64)">
            <summary>
            Gets a timespan given a timestamp (in AV_TIME_BASE units)
            </summary>
            <param name="pts">The PTS.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToDouble(FFmpeg.AutoGen.AVRational)">
            <summary>
            Converts a fraction to a double
            </summary>
            <param name="rational">The rational.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Normalize(System.TimeSpan)">
            <summary>
            Normalizes precision of the TimeSpan to the nearest whole millisecond.
            </summary>
            <param name="source">The source.</param>
            <returns>The normalized, whole-milliscond timespan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the specified value between the minimum and the maximum
            </summary>
            <typeparam name="T">The type of value to clamp</typeparam>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>A value that indicates the relative order of the objects being compared</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.FundamentalAuxsFor(Unosquare.FFME.Shared.MediaType[],Unosquare.FFME.Shared.MediaType)">
            <summary>
            Gets the fundamental (audio or video only) auxiliary media types.
            </summary>
            <param name="all">All.</param>
            <param name="main">The main.</param>
            <returns>The non-main audio or video media types</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ExcludeMediaType(Unosquare.FFME.Shared.MediaType[],Unosquare.FFME.Shared.MediaType)">
            <summary>
            Excludes the type of the media.
            </summary>
            <param name="all">All.</param>
            <param name="main">The main.</param>
            <returns>An array without the media type</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.JoinMediaTypes(Unosquare.FFME.Shared.MediaType,Unosquare.FFME.Shared.MediaType[])">
            <summary>
            Joins the media types.
            </summary>
            <param name="main">The main.</param>
            <param name="with">The with.</param>
            <returns>An array of the media types</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.HasMediaType(Unosquare.FFME.Shared.MediaType[],Unosquare.FFME.Shared.MediaType)">
            <summary>
            Determines whether the array contains the media type
            </summary>
            <param name="all">All.</param>
            <param name="t">The t.</param>
            <returns>True if it exists in the array</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.DeepCopy(Unosquare.FFME.Shared.MediaType[])">
            <summary>
            Deep-copies the array
            </summary>
            <param name="all">All.</param>
            <returns>The copy of the array</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.FundamentalsGreaterThan(Unosquare.FFME.Primitives.MediaTypeDictionary{System.Int32},System.Int32)">
            <summary>
            Verifies all fundamental (audio and video) components are greater than zero
            </summary>
            <param name="all">All.</param>
            <param name="value">The value.</param>
            <returns>
            True if all components are greater than the value
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetSum(Unosquare.FFME.Primitives.MediaTypeDictionary{System.Int32})">
            <summary>
            Gets the sum of all the values in the keyed dictionary.
            </summary>
            <param name="all">All.</param>
            <returns>The sum of all values.</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetBlockCount(Unosquare.FFME.Primitives.MediaTypeDictionary{Unosquare.FFME.Primitives.MediaBlockBuffer})">
            <summary>
            Gets the block count.
            </summary>
            <param name="blocks">The blocks.</param>
            <returns>The block count for all components.</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetMinStartTime(Unosquare.FFME.Primitives.MediaTypeDictionary{Unosquare.FFME.Primitives.MediaBlockBuffer})">
            <summary>
            Gets the minimum start time.
            </summary>
            <param name="blocks">The blocks.</param>
            <returns>The minimum Range Start Time</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ComputePictureNumber(System.TimeSpan,System.TimeSpan,System.Int64)">
            <summary>
            Computes the picture number.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="startNumber">The start number.</param>
            <returns>
            The serial picture number
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ComputeSmtpeTimeCode(System.TimeSpan,System.TimeSpan,FFmpeg.AutoGen.AVRational,System.Int64)">
            <summary>
            Computes the smtpe time code.
            </summary>
            <param name="streamStartTime">The start time offset.</param>
            <param name="frameDuration">The duration.</param>
            <param name="frameTimeBase">The time base.</param>
            <param name="frameNumber">The display picture number.</param>
            <returns>The FFmpeg computed SMTPE Timecode</returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.FFmpegLoadMode">
            <summary>
            The load mode of FFmpeg Libraries
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.FFmpegLoadMode.FullFeatures">
            <summary>
            The full features. Tries to load everything
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.FFmpegLoadMode.MinimumFeatures">
            <summary>
            Loads everything except for AVDevice and AVFilter
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.FFmpegLoadMode.AudioOnly">
            <summary>
            Loads the minimum set for Audio-only programs
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.FFmpegLoadMode.VideoOnly">
            <summary>
            Loads the minimum set for Video-only programs
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.IMediaConnector">
            <summary>
            Connects handlers between the Media Engine event signals and a platfrom-secific implementation
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaInitializing(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.StreamOptions,System.String)">
            <summary>
            Called when [media initializing].
            </summary>
            <param name="sender">The sender.</param>
            <param name="streamOptions">The stream options.</param>
            <param name="mediaUrl">The media URL.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaOpening(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaOptions,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Called when [media opening].
            </summary>
            <param name="sender">The sender.</param>
            <param name="mediaOptions">The media options.</param>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaOpened(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when [media opened].
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaClosed(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when [media closed].
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaFailed(Unosquare.FFME.MediaEngine,System.Exception)">
            <summary>
            Called when [media failed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaEnded(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when [media ended].
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnBufferingStarted(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when [buffering started].
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnBufferingEnded(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when [buffering ended].
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnSeekingStarted(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when [seeking started].
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnSeekingEnded(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when [seeking ended].
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMessageLogged(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Called when [message logged].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Unosquare.FFME.Shared.MediaLogMessage"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnPositionChanged(Unosquare.FFME.MediaEngine,System.TimeSpan,System.TimeSpan)">
            <summary>
            Called when [position changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaStateChanged(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.PlaybackStatus,Unosquare.FFME.Shared.PlaybackStatus)">
            <summary>
            Called when [media state changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.IMediaLogger">
            <summary>
            A very simple and standard interface for message logging
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaLogger.Log(Unosquare.FFME.Shared.MediaLogMessageType,System.String)">
            <summary>
            Logs the specified message of the given type.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.IMediaRenderer">
            <summary>
            Provides a unified API for media rendering classes
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaRenderer.MediaCore">
            <summary>
            Gets the parent media engine.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.WaitForReadyState">
            <summary>
            Waits for the renderer to be ready to render.
            This is called only once before all Render calls are made
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Play">
            <summary>
            Executed when the Play method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Pause">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Stop">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Close">
            <summary>
            Executed when the Close method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Seek">
            <summary>
            Executed after a Seek operation is performed on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Render(Unosquare.FFME.Shared.MediaBlock,System.TimeSpan)">
            <summary>
            Called when a media block is due rendering.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="mediaBlock">The media block.</param>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Update(System.TimeSpan)">
            <summary>
            Called on every block rendering clock cycle just in case some update operation needs to be performed.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.INativeMethods">
            <summary>
            Defines platform-specific methods
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.INativeMethods.SetDllDirectory(System.String)">
            <summary>
            Sets the DLL directory in which external dependencies can be located.
            </summary>
            <param name="path">The path.</param>
            <returns>True for success. False for failure</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.INativeMethods.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Fast pointer memory block copy function
            </summary>
            <param name="targetAddress">The target address.</param>
            <param name="sourceAddress">The source address.</param>
            <param name="copyLength">Length of the copy.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.INativeMethods.FillMemory(System.IntPtr,System.UInt32,System.Byte)">
            <summary>
            Fills the memory with the specified value.
            </summary>
            <param name="startAddress">The start address.</param>
            <param name="length">The length.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.IPlatform">
            <summary>
            Contains factory methods and properties containing platfrom-specific implementations
            of the functionality that is required by an instance of the Media Engine
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IPlatform.NativeMethods">
            <summary>
            Retrieves the platform-specific Native methods
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IPlatform.IsInDebugMode">
            <summary>
            Gets a value indicating whether this instance is in debug mode.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IPlatform.IsInDesignTime">
            <summary>
            Gets a value indicating whether this instance is in design time.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IPlatform.CreateRenderer(Unosquare.FFME.Shared.MediaType,Unosquare.FFME.MediaEngine)">
            <summary>
            Creates a renderer of the specified media type.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <param name="mediaEngine">The media engine.</param>
            <returns>The renderer</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.IPlatform.HandleFFmpegLogMessage(Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Handles global FFmpeg library messages
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaBlock">
            <summary>
            A base class for blocks of the deifferent MediaTypes.
            Blocks are the result of decoding and scaling a frame.
            Blocks have preallocated buffers wich makes them memory and CPU efficient.
            Reuse blocks as much as possible. Once you create a block from a frame,
            you don't need the frame anymore so make sure you dispose the frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.IsStartTimeGuessed">
            <summary>
            Gets a value indicating whether the start time was guessed from siblings
            or the source frame PTS comes from a NO PTS value
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.StartTime">
            <summary>
            Gets the time at which this data should be presented (PTS)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.Duration">
            <summary>
            Gets the amount of time this data has to be presented
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.EndTime">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.StreamIndex">
            <summary>
            Gets the index of the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.SnapTime">
            <summary>
            Gets a safe timestamp the the block can be displayed.
            Returns StartTime if the duration is Zero or negative.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.Contains(System.TimeSpan)">
            <summary>
            Determines whether this media block holds the specified position.
            Returns false if it does not have a valid duration.
            </summary>
            <param name="position">The position.</param>
            <returns>
              <c>true</c> if [contains] [the specified position]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.CompareTo(Unosquare.FFME.Shared.MediaBlock)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaCodecOptions">
            <summary>
            Represents a set of codec options associated with a stream specifier.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaCodecOptions.Options">
            <summary>
            Holds the internal list of option items
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaCodecOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaCodecOptions"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaCodecOptions.Add(System.String,System.String,System.Char)">
            <summary>
            Adds an option
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="streamType">Type of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaCodecOptions.Add(System.String,System.String,System.Int32)">
            <summary>
            Adds an option
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaCodecOptions.Add(System.String,System.String,System.Char,System.Int32)">
            <summary>
            Adds an option
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="streamType">Type of the stream.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaCodecOptions.FilterOptions(FFmpeg.AutoGen.AVCodecID,FFmpeg.AutoGen.AVFormatContext*,FFmpeg.AutoGen.AVStream*,FFmpeg.AutoGen.AVCodec*)">
            <summary>
            Retrieves a dictionary with the options for the specified codec.
            Port of filter_codec_opts
            </summary>
            <param name="codecId">The codec identifier.</param>
            <param name="format">The format.</param>
            <param name="stream">The stream.</param>
            <param name="codec">The codec.</param>
            <returns>The filtered options</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaCodecOptions.GetPerStreamOptions(FFmpeg.AutoGen.AVFormatContext*)">
            <summary>
            Retrieves an array of dictionaries, one for each stream index
            https://ffmpeg.org/ffplay.html#toc-Options
            Port of setup_find_stream_info_opts.
            </summary>
            <param name="format">The format.</param>
            <returns>The options per stream</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaCodecOptions.CharToMediaType(System.Char)">
            <summary>
            Converts a character to a media type.
            </summary>
            <param name="c">The c.</param>
            <returns>The media type</returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaCodecOptions.Names">
            <summary>
            Well-known codec option names
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaCodecOptions.Names.Threads">
            <summary>
            The threads
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaCodecOptions.Names.RefCountedFrames">
            <summary>
            The reference counted frames
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaCodecOptions.Names.LowRes">
            <summary>
            The low resource
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaContainerException">
            <summary>
            A Media Container Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaContainerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaContainerException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaEngineState">
            <summary>
            Contains all the status properties of the stream being handled by the media engine.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaEngineState.GuessedByteRate">
            <summary>
            Gets the guessed buffered bytes in the packet queue per second.
            If bitrate information is available, then it returns the bitrate converted to byte rate.
            Returns null if it has not been guessed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Shared.MediaEngineState" /> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaEngineState" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.SpeedRatio">
            <summary>
            Gets or Sets the SpeedRatio property of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Position">
            <summary>
            Gets or Sets the Position property on the MediaElement.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Source">
            <summary>
            Gets or Sets the Source on this MediaElement.
            The Source property is the Uri of the media to be played.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Volume">
            <summary>
            Gets/Sets the Volume property on the MediaElement.
            Note: Valid values are from 0 to 1
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Balance">
            <summary>
            Gets/Sets the Balance property on the MediaElement.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsMuted">
            <summary>
            Gets/Sets the IsMuted property on the MediaElement.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Metadata">
            <summary>
            Provides key-value pairs of the metadata contained in the media.
            Returns null when media has not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.MediaFormat">
            <summary>
            Gets the media format. Returns null when media has not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.FrameStepDuration">
            <summary>
            Gets the duration of a single frame step.
            If there is a video component with a framerate, this propery returns the length of a frame.
            If there is no video component it simply returns a tenth of a second.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasAudio">
            <summary>
            Returns whether the given media has audio.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasVideo">
            <summary>
            Returns whether the given media has video. Only valid after the
            MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasSubtitles">
            <summary>
            Returns whether the given media has subtitles (in stream or preloaded). Only valid after the
            MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoCodec">
            <summary>
            Gets the video codec.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoBitrate">
            <summary>
            Gets the video bitrate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.NaturalVideoWidth">
            <summary>
            Returns the natural width of the media in the video.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.NaturalVideoHeight">
            <summary>
            Returns the natural height of the media in the video.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoFrameRate">
            <summary>
            Gets the video frame rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoFrameLength">
            <summary>
            Gets the duration in seconds of the video frame.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioCodec">
            <summary>
            Gets the audio codec.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioBitrate">
            <summary>
            Gets the audio bitrate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioChannels">
            <summary>
            Gets the audio channels count.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioSampleRate">
            <summary>
            Gets the audio sample rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioBitsPerSample">
            <summary>
            Gets the audio bits per sample.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.NaturalDuration">
            <summary>
            Gets the Media's natural duration
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.CanPause">
            <summary>
            Returns whether the currently loaded media can be paused.
            This is only valid after the MediaOpened event has fired.
            Note that this property is computed based on wether the stream is detected to be a live stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsLiveStream">
            <summary>
            Returns whether the currently loaded media is live or real-time and does not have a set duration
            This is only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsNetowrkStream">
            <summary>
            Returns whether the currently loaded media is a network stream.
            This is only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsSeekable">
            <summary>
            Gets a value indicating whether the currently loaded media can be seeked.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsPlaying">
            <summary>
            Gets a value indicating whether the media clock is playing.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsPaused">
            <summary>
            Gets a value indicating whether the media clock is paused.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsOpen">
            <summary>
            Gets a value indicating whether this media element
            currently has an open media url.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.MediaState">
            <summary>
            Gets the current playback state.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasMediaEnded">
            <summary>
            Gets a value indicating whether the media has reached its end.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsBuffering">
            <summary>
            Get a value indicating whether the media is buffering.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsSeeking">
            <summary>
            Gets a value indicating whether the media seeking is in progress.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoSmtpeTimecode">
            <summary>
            Returns the current video SMTPE timecode if available.
            If not available, this property returns an empty string.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoHardwareDecoder">
            <summary>
            Gets the name of the video hardware decoder in use.
            Enabling hardware acceleration does not guarantee decoding will be performed in hardware.
            When hardware decoding of frames is in use this will return the name of the HW accelerator.
            Otherwise it will return an empty string.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.BufferingProgress">
            <summary>
            Gets a value that indicates the percentage of buffering progress made.
            Range is from 0 to 1
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.BufferCacheLength">
            <summary>
            The packet buffer length.
            It is adjusted to 1 second if bitrate information is available.
            Otherwise, it's simply 512KB and it is guessed later on.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.DownloadProgress">
            <summary>
            Gets a value that indicates the percentage of download progress made.
            Range is from 0 to 1
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.DownloadCacheLength">
            <summary>
            Gets the maximum packet buffer length, according to the bitrate (if available).
            If it's a realtime stream it will return 30 times the buffer cache length.
            Otherwise, it will return  4 times of the buffer cache length.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsOpening">
            <summary>
            Gets a value indicating whether the media is in the process of opening.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdatePosition(System.TimeSpan)">
            <summary>
            Updates the position.
            </summary>
            <param name="newPosition">The position.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateMediaState(Unosquare.FFME.Shared.PlaybackStatus,System.Nullable{System.TimeSpan})">
            <summary>
            Updates the MediaState property.
            </summary>
            <param name="mediaState">State of the media.</param>
            <param name="position">The new position value for this state.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.ResetMediaProperties">
            <summary>
            Resets the controller properies.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.InitializeBufferingProperties">
            <summary>
            Resets all the buffering properties to their defaults.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateBufferingProperties">
            <summary>
            Updates the buffering properties: IsBuffering, BufferingProgress, DownloadProgress.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.GuessBufferingProperties">
            <summary>
            Guesses the bitrate of the input stream.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaInfo">
            <summary>
            Holds media information about the input, its chapters, programs and individual stream components
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.#ctor(Unosquare.FFME.Decoding.MediaContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaInfo"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.InputUrl">
            <summary>
            Gets the input URL string used to access and create the media container
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Format">
            <summary>
            Gets the name of the container format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Metadata">
            <summary>
            Gets the metadata for the input. This may include stuff like title, creation date, company name, etc.
            Individual stream components, chapters and programs may contain additional metadata.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Duration">
            <summary>
            Gets the duration of the input as reported by the container format.
            Individual stream components may have different values
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.StartTime">
            <summary>
            Gets the start timestamp of the input as reported by the container format.
            Individual stream components may have different values
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.BitRate">
            <summary>
            If available, returns a non-zero value as reported by the container format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Chapters">
            <summary>
            Gets a list of chapters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Programs">
            <summary>
            Gets a list of programs with their associated streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Streams">
            <summary>
            Gets the dictionary of stream information components by stream index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.BestStreams">
            <summary>
            Provides access to the best streams of each media type found in the container.
            This uses some internal FFmpeg heuristics.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.ExtractStreams(FFmpeg.AutoGen.AVFormatContext*)">
            <summary>
            Extracts the stream infos from the input.
            </summary>
            <param name="ic">The ic.</param>
            <returns>The list of stream infos</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.FindBestStreams(FFmpeg.AutoGen.AVFormatContext*,System.Collections.ObjectModel.ReadOnlyDictionary{System.Int32,Unosquare.FFME.Shared.StreamInfo})">
            <summary>
            Finds the best streams for audio video, and subtitles.
            </summary>
            <param name="ic">The ic.</param>
            <param name="streams">The streams.</param>
            <returns>The star infos</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.ExtractChapters(FFmpeg.AutoGen.AVFormatContext*)">
            <summary>
            Extracts the chapters from the input.
            </summary>
            <param name="ic">The ic.</param>
            <returns>The chapters</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.ExtractPrograms(FFmpeg.AutoGen.AVFormatContext*,System.Collections.ObjectModel.ReadOnlyDictionary{System.Int32,Unosquare.FFME.Shared.StreamInfo})">
            <summary>
            Extracts the programs from the input and creates associations between programs and streams.
            </summary>
            <param name="ic">The ic.</param>
            <param name="streams">The streams.</param>
            <returns>The program information</returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.StreamInfo">
            <summary>
            Represents media stream information
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.StreamId">
            <summary>
            Gets the stream identifier. This is different from the stream index.
            Typically this value is not very useful.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.StreamIndex">
            <summary>
            Gets the index of the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecType">
            <summary>
            Gets the type of the codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecTypeName">
            <summary>
            Gets the name of the codec type. Audio, Video, Subtitle, Data, etc.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Codec">
            <summary>
            Gets the codec identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecName">
            <summary>
            Gets the name of the codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecProfile">
            <summary>
            Gets the codec profile. Only valid for H.264 or
            video codecs that use profiles. Otherwise empty.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecTag">
            <summary>
            Gets the codec tag. Not very useful except for fixing bugs with
            some demuxer scenarios.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.HasClosedCaptions">
            <summary>
            Gets a value indicating whether this stream has closed captions.
            Typically this is set for video streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.IsLossless">
            <summary>
            Gets a value indicating whether this stream contains lossless compressed data.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.PixelFormat">
            <summary>
            Gets the pixel format. Only valid for Vide streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.PixelWidth">
            <summary>
            Gets the width of the video frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.PixelHeight">
            <summary>
            Gets the height of the video frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.FieldOrder">
            <summary>
            Gets the field order. This is useful to determine
            if the video needs deinterlacing
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.ColorRange">
            <summary>
            Gets the video color range.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.SampleRate">
            <summary>
            Gets the audio sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.SampleFormat">
            <summary>
            Gets the audio sample format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.TimeBase">
            <summary>
            Gets the stream time base unit in seconds.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.SampleAspectRatio">
            <summary>
            Gets the sample aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.DisplayAspectRatio">
            <summary>
            Gets the display aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.BitRate">
            <summary>
            Gets the reported bit rate. 9 for unavalable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.MaxBitRate">
            <summary>
            Gets the maximum bit rate for variable bitrate streams. 0 if unavailable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.InfoFrameCount">
            <summary>
            Gets the number of frames that were read to obtain the stream's information.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.ReferenceFrameCount">
            <summary>
            Gets the number of reference frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.FPS">
            <summary>
            Gets the average FPS reported by the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.TBR">
            <summary>
            Gets the real (base) framerate of the stream
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.TBN">
            <summary>
            Gets the fundamental unit of time in 1/seconds used to represent timestamps in the stream, according to the stream data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.TBC">
            <summary>
            Gets the fundamental unit of time in 1/seconds used to represent timestamps in the stream ,accoring to the codec
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Disposition">
            <summary>
            Gets the disposition flags.
            Please see ffmpeg.AV_DISPOSITION_* fields.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Duration">
            <summary>
            Gets the duration.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Metadata">
            <summary>
            Gets the stream's metadata.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Language">
            <summary>
            Gets the language string from the stream's metadata.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.ChapterInfo">
            <summary>
            Represents a chapter within a container
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.Index">
            <summary>
            Gets the chapter index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.ChapterId">
            <summary>
            Gets the chapter identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.StartTime">
            <summary>
            Gets the start time of the chapter.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.EndTime">
            <summary>
            Gets the end time of the chapter.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.Metadata">
            <summary>
            Gets the chapter metadata.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.ProgramInfo">
            <summary>
            Represents a program and its associated streams within a container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.ProgramNumber">
            <summary>
            Gets the program number.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.ProgramId">
            <summary>
            Gets the program identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.Metadata">
            <summary>
            Gets the program metadata.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.Streams">
            <summary>
            Gets the associated program streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.Name">
            <summary>
            Gets the name of the program. Empty if unavailable.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaLogMessage">
            <summary>
            Represents the contents of a logging message that was sent to the log manager.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaLogMessage.#ctor(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaLogMessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaLogMessage" /> class.
            </summary>
            <param name="mediaElement">The media element.</param>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.Source">
            <summary>
            Gets the intance of the MediaElement that generated this message.
            When null, it means FFmpeg generated this message.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.TimestampUtc">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.Message">
            <summary>
            Gets the contents of the message.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaLogMessageType">
            <summary>
            Defines the different log message types received by the log handler
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.None">
            <summary>
            The none messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Info">
            <summary>
            The information messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Debug">
            <summary>
            The debug messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Trace">
            <summary>
            The trace messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Error">
            <summary>
            The error messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Warning">
            <summary>
            The warning messge type
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaOptions">
            <summary>
            Represetnts options that applied before initializing media components and their corresponding
            codecs. Once the container has created the media components, changing these options will have no effect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.CodecOptions">
            <summary>
            Gets the codec options.
            Codec options are documented here: https://www.ffmpeg.org/ffmpeg-codecs.html#Codec-Options
            Port of codec_opts
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.EnableLowRes">
            <summary>
            Gets or sets a value indicating whether [enable low resource].
            In theroy this should be 0,1,2,3 for 1, 1/2, 1,4 and 1/8 resolutions.
            TODO: We are for now just supporting 1/2 resolution (true value)
            Port of lowres.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.EnableFastDecoding">
            <summary>
            Gets or sets a value indicating whether [enable fast decoding].
            Port of fast
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.EnableHardwareAcceleration">
            <summary>
            Gets or sets a value indicating whether experimental hardware acceleration is enabled.
            Defaults to false. This feature is experimental.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.IsAudioDisabled">
            <summary>
            Prevent reading from audio stream components.
            Port of audio_disable
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.IsVideoDisabled">
            <summary>
            Prevent reading from video stream components.
            Port of video_disable
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.IsSubtitleDisabled">
            <summary>
            Prevent reading from subtitle stream components.
            Port of subtitle_disable
            Subtitles are not yet first-class citizens in FFmpeg and
            this is why they are disabled by default.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.VideoFilter">
            <summary>
            Allows for a custom video filter string.
            Please see: https://ffmpeg.org/ffmpeg-filters.html#Video-Filters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.VideoStream">
            <summary>
            Initially contains the best suitable video stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.AudioFilter">
            <summary>
            Allows for a custom audio filter string.
            Please see: https://ffmpeg.org/ffmpeg-filters.html#Audio-Filters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.AudioStream">
            <summary>
            Initially contains the best suitable audio stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.SubtitleStream">
            <summary>
            Initially contains the best suitable subititle stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.SubtitlesUrl">
            <summary>
            Gets or sets the subtitles URL.
            If set, the subtitles will be side-loaded and the loaded media
            subtitles (if any) will be ignored.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaType">
            <summary>
            Enumerates the different Media Types compatible with AVMEDIATYPE_* constants
            defined by FFmpeg
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaType.None">
            <summary>
            Represents an unexisting media type (-1)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaType.Video">
            <summary>
            The video media type (0)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaType.Audio">
            <summary>
            The audio media type (1)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaType.Subtitle">
            <summary>
            The subtitle media type (3)
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.PlaybackStatus">
            <summary>
            Media States compatible with MediaState enumeration
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Manual">
            <summary>
            The manual status
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Play">
            <summary>
            The play status
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Close">
            <summary>
            The close status
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Pause">
            <summary>
            The pause status
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Stop">
            <summary>
            The stop status
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.StreamFormatOptions">
            <summary>
            Contains options for the format context as documented:
            https://ffmpeg.org/ffmpeg-formats.html#Format-Options
            TODO: (Floyd) There are still quite a bit of options that have not been implemented.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.StreamFormatOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.StreamFormatOptions"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.EnableReducedBuffering">
            <summary>
            Port of avioflags direct
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.ProbeSize">
            <summary>
            Set probing size in bytes, i.e. the size of the data to analyze to get stream information.
            A higher value will enable detecting more information in case it is dispersed into the stream,
            but will increase latency. Must be an integer not lesser than 32. It is 5000000 by default.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.PacketSize">
            <summary>
            Set packet size.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagIgnoreIndex">
            <summary>
            Ignore index.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagEnableFastSeek">
            <summary>
            Enable fast, but inaccurate seeks for some formats.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagGeneratePts">
            <summary>
            Generate PTS.
            Port of genpts
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagEnableNoFillin">
            <summary>
            Do not fill in missing values that can be exactly calculated.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagIgnoreDts">
            <summary>
            Ignore DTS.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagDiscardCorrupt">
            <summary>
            Discard corrupted frames.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagSortDts">
            <summary>
            Try to interleave output packets by DTS.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagKeepSideData">
            <summary>
            Do not merge side data.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagEnableLatmPayload">
            <summary>
            Enable RTP MP4A-LATM payload.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagNoBuffer">
            <summary>
            Reduce the latency introduced by optional buffering
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.FlagStopAtShortest">
            <summary>
            Stop muxing at the end of the shortest stream.
            It may be needed to increase max_interleave_delta to avoid flushing the longer streams before EOF.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.SeekToAny">
            <summary>
            Allow seeking to non-keyframes on demuxer level when supported if set to 1. Default is 0.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.MaxAnalyzeDuration">
            <summary>
            Gets or sets the maximum duration to be analyzed before ifentifying stream information.
            In realtime streams this can be reduced to reduce latency (i.e. TimeSpan.Zero)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamFormatOptions.CryptoKey">
            <summary>
            Set decryption key.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.StreamInputOptions">
            <summary>
            A dictionary containing generic input options for both:
            Global Codec Options: https://www.ffmpeg.org/ffmpeg-all.html#Codec-Options
            Demuxer-Private options: https://ffmpeg.org/ffmpeg-all.html#Demuxers
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.StreamInputOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.StreamInputOptions"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInputOptions.ForcedInputFormat">
            <summary>
            Gets or sets the forced input format. If let null or empty,
            the input format will be selected automatically.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInputOptions.ReadTimeout">
            <summary>
            Gets or sets the amount of time to wait for a an open or read operation to complete.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.StreamInputOptions.Names">
            <summary>
            A collection of well-known demuxer-specific, non-global format options
            TODO: (Floyd) Implement some of the more common names maybe?
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.StreamInputOptions.Names.ScanAllPmts">
            <summary>
            mpegts
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.StreamInputOptions.Names.FrameRate">
            <summary>
            The frame rate input setting
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.StreamOptions">
            <summary>
            Represents a set of options that are used to initialize a media container before opening the stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.StreamOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.StreamOptions"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamOptions.Format">
            <summary>
            Contains options for the format context as documented:
            https://ffmpeg.org/ffmpeg-formats.html#Format-Options
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamOptions.Input">
            <summary>
            A dictionary containing generic input options for both:
            Global Codec Options: https://www.ffmpeg.org/ffmpeg-all.html#Codec-Options
            Demuxer-Private Options: https://ffmpeg.org/ffmpeg-all.html#Demuxers
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamOptions.ProtocolPrefix">
            <summary>
            Gets the protocol prefix.
            Typically async for local files and empty for other types.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.SubtitleBlock">
            <summary>
            A subtitle frame container. Simply contains text lines.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.SubtitleBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.SubtitleBlock.Text">
            <summary>
            Gets the lines of text for this subtitle frame with all formatting stripped out.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.SubtitleBlock.OriginalText">
            <summary>
            Gets the original text in SRT or ASS fromat.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.SubtitleBlock.OriginalTextType">
            <summary>
            Gets the type of the original text.
            Returns None when it's a bitmap or when it's None
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.SubtitleBlock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.VideoBlock">
            <summary>
            A pre-allocated, scaled video block. The buffer is in BGR, 24-bit format
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoBlock.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Shared.VideoBlock"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.Buffer">
            <summary>
            Gets a pointer to the first byte of the data buffer.
            The format is 32-bit BGRA
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.BufferLength">
            <summary>
            Gets the length of the buffer in bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.BufferStride">
            <summary>
            The picture buffer stride.
            Pixel Width * 32-bit color (4 byes) + alignment (typically 0 for modern hw).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PixelWidth">
            <summary>
            Gets the number of horizontal pixels in the image.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PixelHeight">
            <summary>
            Gets the number of vertical pixels in the image.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.AspectWidth">
            <summary>
            Gets the width of the aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.AspectHeight">
            <summary>
            Gets the height of the aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.SmtpeTimecode">
            <summary>
            Gets the SMTPE time code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.DisplayPictureNumber">
            <summary>
            Gets the display picture number (frame number).
            If not set by the decoder, this attempts to obtain it by dividing the start time by the
            frame duration
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.CodedPictureNumber">
            <summary>
            Gets the coded picture number set by the decoder.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.ClosedCaptions">
            <summary>
            Gets the closed caption packets for this video block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PictureBufferLength">
            <summary>
            The picture buffer length of the last allocated buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PictureBuffer">
            <summary>
            Holds a reference to the last allocated buffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoBlock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoBlock.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
    </members>
</doc>
